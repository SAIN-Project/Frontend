/**
 * @fileoverview added by tsickle
 * Generated from: lib/directives/monaco-editor-loader.directive.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, TemplateRef, ViewContainerRef } from '@angular/core';
import { MonacoEditorLoaderService } from '../services/monaco-editor-loader.service';
import { takeUntil } from 'rxjs/operators';
import { Subject } from 'rxjs';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '../services/monaco-editor-loader.service';
var MonacoEditorLoaderDirective = /** @class */ (function () {
    function MonacoEditorLoaderDirective(templateRef, viewContainer, monacoEditorLoaderService) {
        this.templateRef = templateRef;
        this.viewContainer = viewContainer;
        this.monacoEditorLoaderService = monacoEditorLoaderService;
        this.isMonacoLoaded$ = this.monacoEditorLoaderService.isMonacoLoaded$.asObservable();
        this.destroyed$ = new Subject();
    }
    /**
     * @return {?}
     */
    MonacoEditorLoaderDirective.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.isMonacoLoaded$.pipe(takeUntil(this.destroyed$)).subscribe((/**
         * @param {?} loaded
         * @return {?}
         */
        function (loaded) {
            if (!loaded) {
                return _this.viewContainer.clear();
            }
            _this.viewContainer.createEmbeddedView(_this.templateRef);
        }));
    };
    /**
     * @return {?}
     */
    MonacoEditorLoaderDirective.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.destroyed$.next();
        this.destroyed$.complete();
    };
    /** @nocollapse */
    MonacoEditorLoaderDirective.ctorParameters = function () { return [
        { type: TemplateRef },
        { type: ViewContainerRef },
        { type: MonacoEditorLoaderService }
    ]; };
MonacoEditorLoaderDirective.ɵfac = function MonacoEditorLoaderDirective_Factory(t) { return new (t || MonacoEditorLoaderDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.TemplateRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.MonacoEditorLoaderService)); };
MonacoEditorLoaderDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: MonacoEditorLoaderDirective, selectors: [["", "ngxLoadMonacoEditor", ""]] });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MonacoEditorLoaderDirective, [{
        type: Directive,
        args: [{ selector: '[ngxLoadMonacoEditor]' }]
    }], function () { return [{ type: ɵngcc0.TemplateRef }, { type: ɵngcc0.ViewContainerRef }, { type: ɵngcc1.MonacoEditorLoaderService }]; }, null); })();
    return MonacoEditorLoaderDirective;
}());
export { MonacoEditorLoaderDirective };
if (false) {
    /** @type {?} */
    MonacoEditorLoaderDirective.prototype.isMonacoLoaded$;
    /** @type {?} */
    MonacoEditorLoaderDirective.prototype.destroyed$;
    /**
     * @type {?}
     * @private
     */
    MonacoEditorLoaderDirective.prototype.templateRef;
    /**
     * @type {?}
     * @private
     */
    MonacoEditorLoaderDirective.prototype.viewContainer;
    /**
     * @type {?}
     * @private
     */
    MonacoEditorLoaderDirective.prototype.monacoEditorLoaderService;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9uYWNvLWVkaXRvci1sb2FkZXIuZGlyZWN0aXZlLmpzIiwic291cmNlcyI6WyJAbWF0ZXJpYS11aS9uZ3gtbW9uYWNvLWVkaXRvci9saWIvZGlyZWN0aXZlcy9tb25hY28tZWRpdG9yLWxvYWRlci5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLFdBQVcsRUFBRSxnQkFBZ0IsRUFBcUIsTUFBTSxlQUFlLENBQUM7QUFDNUYsT0FBTyxFQUFFLHlCQUF5QixFQUFFLE1BQU0sMENBQTBDLENBQUM7QUFDckYsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQzNDLE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxNQUFNLENBQUM7OztBQUUvQjtBQUNhLElBSVgscUNBQ1UsV0FBNkIsRUFDN0IsYUFBK0IsRUFDL0IseUJBQW9EO0FBQzdELFFBSFMsZ0JBQVcsR0FBWCxXQUFXLENBQWtCO0FBQUMsUUFDOUIsa0JBQWEsR0FBYixhQUFhLENBQWtCO0FBQUMsUUFDaEMsOEJBQXlCLEdBQXpCLHlCQUF5QixDQUEyQjtBQUNoRSxRQVBFLG9CQUFlLEdBQUcsSUFBSSxDQUFDLHlCQUF5QixDQUFDLGVBQWUsQ0FBQyxZQUFZLEVBQUUsQ0FBQztBQUNsRixRQUFFLGVBQVUsR0FBRyxJQUFJLE9BQU8sRUFBUSxDQUFDO0FBQ25DLElBS0ssQ0FBQztBQUNOO0FBQ087QUFDSTtBQUFRLElBRGpCLDhDQUFRO0FBQ1I7QUFBbUI7QUFBUSxJQUQzQjtBQUNELFFBREMsaUJBT0M7QUFDSCxRQVBJLElBQUksQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxTQUFTO0FBQU07QUFDckQ7QUFDQztBQUFZLFFBRm1DLFVBQUMsTUFBTTtBQUFJLFlBQ3pFLElBQUksQ0FBRSxNQUFNLEVBQUU7QUFDcEIsZ0JBQVEsT0FBTyxLQUFJLENBQUMsYUFBYSxDQUFDLEtBQUssRUFBRSxDQUFDO0FBQzFDLGFBQU87QUFDUCxZQUFNLEtBQUksQ0FBQyxhQUFhLENBQUMsa0JBQWtCLENBQUMsS0FBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDO0FBQzlELFFBQUksQ0FBQyxFQUFDLENBQUM7QUFDUCxJQUFFLENBQUM7QUFFSDtBQUFRO0FBQ0M7QUFBUSxJQURmLGlEQUFXO0FBQ1g7QUFBbUI7QUFDcEIsSUFGQztBQUFjLFFBQ1osSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLEVBQUUsQ0FBQztBQUMzQixRQUFJLElBQUksQ0FBQyxVQUFVLENBQUMsUUFBUSxFQUFFLENBQUM7QUFDL0IsSUFBRSxDQUFDLENBdEJNO0FBQUM7d0NBRFQsU0FBUyxTQUFDLEVBQUUsUUFBUSxFQUFFLHRFQUNVO3FCQURhLEVBQUUsdkJBRWYsZ0JBUGIsV0FBVztBQUFJLGdCQUFGLGdCQUFnQjtBQUFJLGdCQUM1Qyx5QkFBeUI7QUFBRzs7Ozs7OzJKQUFTO0FBQUMsSUE0Qi9DLGtDQUFDO0FBQ0EsQ0FEQSxBQXhCRCxJQXdCQztBQUNELFNBeEJhLDJCQUEyQjtBQUFJO0FBQWE7QUFDbkQsSUFBSixzREFBZ0Y7QUFDbEY7QUFBcUIsSUFBbkIsaURBQWlDO0FBQ25DO0FBQ087QUFDRTtBQUFnQjtBQUFRLElBQTdCLGtEQUFxQztBQUFDO0FBQ25DO0FBQWlCO0FBQWdCO0FBQ3JDLElBREMsb0RBQXVDO0FBQUM7QUFDckM7QUFBaUI7QUFBZ0I7QUFBUSxJQUE1QyxnRUFBNEQ7O0FBYkEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBRUEsQUFLQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQUZBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQU5BLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBTUEsQUFBQSxBQUVBLEFBQUEsQUFBQSxBQUFBLEFBT0EsQUFOQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUVBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQXZCQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBTEEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBNEJBLEFBQUEsQUFBQSxBQXhCQSxBQXdCQSxBQXZCQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFHQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEaXJlY3RpdmUsIFRlbXBsYXRlUmVmLCBWaWV3Q29udGFpbmVyUmVmLCBPbkRlc3Ryb3ksIE9uSW5pdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgTW9uYWNvRWRpdG9yTG9hZGVyU2VydmljZSB9IGZyb20gJy4uL3NlcnZpY2VzL21vbmFjby1lZGl0b3ItbG9hZGVyLnNlcnZpY2UnO1xuaW1wb3J0IHsgdGFrZVVudGlsIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuaW1wb3J0IHsgU3ViamVjdCB9IGZyb20gJ3J4anMnO1xuXG5ARGlyZWN0aXZlKHsgc2VsZWN0b3I6ICdbbmd4TG9hZE1vbmFjb0VkaXRvcl0nIH0pXG5leHBvcnQgY2xhc3MgTW9uYWNvRWRpdG9yTG9hZGVyRGlyZWN0aXZlIGltcGxlbWVudHMgT25Jbml0LCBPbkRlc3Ryb3kge1xuICBpc01vbmFjb0xvYWRlZCQgPSB0aGlzLm1vbmFjb0VkaXRvckxvYWRlclNlcnZpY2UuaXNNb25hY29Mb2FkZWQkLmFzT2JzZXJ2YWJsZSgpO1xuICBkZXN0cm95ZWQkID0gbmV3IFN1YmplY3Q8dm9pZD4oKTtcblxuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIHRlbXBsYXRlUmVmOiBUZW1wbGF0ZVJlZjxhbnk+LFxuICAgIHByaXZhdGUgdmlld0NvbnRhaW5lcjogVmlld0NvbnRhaW5lclJlZixcbiAgICBwcml2YXRlIG1vbmFjb0VkaXRvckxvYWRlclNlcnZpY2U6IE1vbmFjb0VkaXRvckxvYWRlclNlcnZpY2VcbiAgKSB7fVxuXG4gIG5nT25Jbml0KCkge1xuICAgIHRoaXMuaXNNb25hY29Mb2FkZWQkLnBpcGUodGFrZVVudGlsKHRoaXMuZGVzdHJveWVkJCkpLnN1YnNjcmliZSgobG9hZGVkKSA9PiB7XG4gICAgICBpZiAoISBsb2FkZWQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudmlld0NvbnRhaW5lci5jbGVhcigpO1xuICAgICAgfVxuICAgICAgdGhpcy52aWV3Q29udGFpbmVyLmNyZWF0ZUVtYmVkZGVkVmlldyh0aGlzLnRlbXBsYXRlUmVmKTtcbiAgICB9KTtcbiAgfVxuXG4gIG5nT25EZXN0cm95KCkge1xuICAgIHRoaXMuZGVzdHJveWVkJC5uZXh0KCk7XG4gICAgdGhpcy5kZXN0cm95ZWQkLmNvbXBsZXRlKCk7XG4gIH1cbn1cbiJdfQ==
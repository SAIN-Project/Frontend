/**
 * @fileoverview added by tsickle
 * Generated from: lib/directives/monaco-editor-loader.directive.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, TemplateRef, ViewContainerRef } from '@angular/core';
import { MonacoEditorLoaderService } from '../services/monaco-editor-loader.service';
import { takeUntil } from 'rxjs/operators';
import { Subject } from 'rxjs';
var MonacoEditorLoaderDirective = /** @class */ (function () {
    function MonacoEditorLoaderDirective(templateRef, viewContainer, monacoEditorLoaderService) {
        this.templateRef = templateRef;
        this.viewContainer = viewContainer;
        this.monacoEditorLoaderService = monacoEditorLoaderService;
        this.isMonacoLoaded$ = this.monacoEditorLoaderService.isMonacoLoaded$.asObservable();
        this.destroyed$ = new Subject();
    }
    /**
     * @return {?}
     */
    MonacoEditorLoaderDirective.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.isMonacoLoaded$.pipe(takeUntil(this.destroyed$)).subscribe((/**
         * @param {?} loaded
         * @return {?}
         */
        function (loaded) {
            if (!loaded) {
                return _this.viewContainer.clear();
            }
            _this.viewContainer.createEmbeddedView(_this.templateRef);
        }));
    };
    /**
     * @return {?}
     */
    MonacoEditorLoaderDirective.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.destroyed$.next();
        this.destroyed$.complete();
    };
    MonacoEditorLoaderDirective.decorators = [
        { type: Directive, args: [{ selector: '[ngxLoadMonacoEditor]' },] }
    ];
    /** @nocollapse */
    MonacoEditorLoaderDirective.ctorParameters = function () { return [
        { type: TemplateRef },
        { type: ViewContainerRef },
        { type: MonacoEditorLoaderService }
    ]; };
    return MonacoEditorLoaderDirective;
}());
export { MonacoEditorLoaderDirective };
if (false) {
    /** @type {?} */
    MonacoEditorLoaderDirective.prototype.isMonacoLoaded$;
    /** @type {?} */
    MonacoEditorLoaderDirective.prototype.destroyed$;
    /**
     * @type {?}
     * @private
     */
    MonacoEditorLoaderDirective.prototype.templateRef;
    /**
     * @type {?}
     * @private
     */
    MonacoEditorLoaderDirective.prototype.viewContainer;
    /**
     * @type {?}
     * @private
     */
    MonacoEditorLoaderDirective.prototype.monacoEditorLoaderService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9uYWNvLWVkaXRvci1sb2FkZXIuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQG1hdGVyaWEtdWkvbmd4LW1vbmFjby1lZGl0b3IvIiwic291cmNlcyI6WyJsaWIvZGlyZWN0aXZlcy9tb25hY28tZWRpdG9yLWxvYWRlci5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLFdBQVcsRUFBRSxnQkFBZ0IsRUFBcUIsTUFBTSxlQUFlLENBQUM7QUFDNUYsT0FBTyxFQUFFLHlCQUF5QixFQUFFLE1BQU0sMENBQTBDLENBQUM7QUFDckYsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQzNDLE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFFL0I7SUFLRSxxQ0FDVSxXQUE2QixFQUM3QixhQUErQixFQUMvQix5QkFBb0Q7UUFGcEQsZ0JBQVcsR0FBWCxXQUFXLENBQWtCO1FBQzdCLGtCQUFhLEdBQWIsYUFBYSxDQUFrQjtRQUMvQiw4QkFBeUIsR0FBekIseUJBQXlCLENBQTJCO1FBTjlELG9CQUFlLEdBQUcsSUFBSSxDQUFDLHlCQUF5QixDQUFDLGVBQWUsQ0FBQyxZQUFZLEVBQUUsQ0FBQztRQUNoRixlQUFVLEdBQUcsSUFBSSxPQUFPLEVBQVEsQ0FBQztJQU05QixDQUFDOzs7O0lBRUosOENBQVE7OztJQUFSO1FBQUEsaUJBT0M7UUFOQyxJQUFJLENBQUMsZUFBZSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsU0FBUzs7OztRQUFDLFVBQUMsTUFBTTtZQUNyRSxJQUFJLENBQUUsTUFBTSxFQUFFO2dCQUNaLE9BQU8sS0FBSSxDQUFDLGFBQWEsQ0FBQyxLQUFLLEVBQUUsQ0FBQzthQUNuQztZQUNELEtBQUksQ0FBQyxhQUFhLENBQUMsa0JBQWtCLENBQUMsS0FBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDO1FBQzFELENBQUMsRUFBQyxDQUFDO0lBQ0wsQ0FBQzs7OztJQUVELGlEQUFXOzs7SUFBWDtRQUNFLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxFQUFFLENBQUM7UUFDdkIsSUFBSSxDQUFDLFVBQVUsQ0FBQyxRQUFRLEVBQUUsQ0FBQztJQUM3QixDQUFDOztnQkF2QkYsU0FBUyxTQUFDLEVBQUUsUUFBUSxFQUFFLHVCQUF1QixFQUFFOzs7O2dCQUw1QixXQUFXO2dCQUFFLGdCQUFnQjtnQkFDeEMseUJBQXlCOztJQTRCbEMsa0NBQUM7Q0FBQSxBQXhCRCxJQXdCQztTQXZCWSwyQkFBMkI7OztJQUN0QyxzREFBZ0Y7O0lBQ2hGLGlEQUFpQzs7Ozs7SUFHL0Isa0RBQXFDOzs7OztJQUNyQyxvREFBdUM7Ozs7O0lBQ3ZDLGdFQUE0RCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERpcmVjdGl2ZSwgVGVtcGxhdGVSZWYsIFZpZXdDb250YWluZXJSZWYsIE9uRGVzdHJveSwgT25Jbml0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBNb25hY29FZGl0b3JMb2FkZXJTZXJ2aWNlIH0gZnJvbSAnLi4vc2VydmljZXMvbW9uYWNvLWVkaXRvci1sb2FkZXIuc2VydmljZSc7XG5pbXBvcnQgeyB0YWtlVW50aWwgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5pbXBvcnQgeyBTdWJqZWN0IH0gZnJvbSAncnhqcyc7XG5cbkBEaXJlY3RpdmUoeyBzZWxlY3RvcjogJ1tuZ3hMb2FkTW9uYWNvRWRpdG9yXScgfSlcbmV4cG9ydCBjbGFzcyBNb25hY29FZGl0b3JMb2FkZXJEaXJlY3RpdmUgaW1wbGVtZW50cyBPbkluaXQsIE9uRGVzdHJveSB7XG4gIGlzTW9uYWNvTG9hZGVkJCA9IHRoaXMubW9uYWNvRWRpdG9yTG9hZGVyU2VydmljZS5pc01vbmFjb0xvYWRlZCQuYXNPYnNlcnZhYmxlKCk7XG4gIGRlc3Ryb3llZCQgPSBuZXcgU3ViamVjdDx2b2lkPigpO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgdGVtcGxhdGVSZWY6IFRlbXBsYXRlUmVmPGFueT4sXG4gICAgcHJpdmF0ZSB2aWV3Q29udGFpbmVyOiBWaWV3Q29udGFpbmVyUmVmLFxuICAgIHByaXZhdGUgbW9uYWNvRWRpdG9yTG9hZGVyU2VydmljZTogTW9uYWNvRWRpdG9yTG9hZGVyU2VydmljZVxuICApIHt9XG5cbiAgbmdPbkluaXQoKSB7XG4gICAgdGhpcy5pc01vbmFjb0xvYWRlZCQucGlwZSh0YWtlVW50aWwodGhpcy5kZXN0cm95ZWQkKSkuc3Vic2NyaWJlKChsb2FkZWQpID0+IHtcbiAgICAgIGlmICghIGxvYWRlZCkge1xuICAgICAgICByZXR1cm4gdGhpcy52aWV3Q29udGFpbmVyLmNsZWFyKCk7XG4gICAgICB9XG4gICAgICB0aGlzLnZpZXdDb250YWluZXIuY3JlYXRlRW1iZWRkZWRWaWV3KHRoaXMudGVtcGxhdGVSZWYpO1xuICAgIH0pO1xuICB9XG5cbiAgbmdPbkRlc3Ryb3koKSB7XG4gICAgdGhpcy5kZXN0cm95ZWQkLm5leHQoKTtcbiAgICB0aGlzLmRlc3Ryb3llZCQuY29tcGxldGUoKTtcbiAgfVxufVxuIl19
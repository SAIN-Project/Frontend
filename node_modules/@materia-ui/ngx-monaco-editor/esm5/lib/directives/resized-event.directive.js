/**
 * @fileoverview added by tsickle
 * Generated from: lib/directives/resized-event.directive.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, ElementRef, EventEmitter, Output } from '@angular/core';
import { ResizeSensor } from 'css-element-queries';
var ResizedEvent = /** @class */ (function () {
    function ResizedEvent(element, newWidth, newHeight, oldWidth, oldHeight) {
        this.element = element;
        this.newWidth = newWidth;
        this.newHeight = newHeight;
        this.oldWidth = oldWidth;
        this.oldHeight = oldHeight;
    }
    return ResizedEvent;
}());
export { ResizedEvent };
if (false) {
    /** @type {?} */
    ResizedEvent.prototype.element;
    /** @type {?} */
    ResizedEvent.prototype.newWidth;
    /** @type {?} */
    ResizedEvent.prototype.newHeight;
    /** @type {?} */
    ResizedEvent.prototype.oldWidth;
    /** @type {?} */
    ResizedEvent.prototype.oldHeight;
}
var ResizedDirective = /** @class */ (function () {
    function ResizedDirective(element) {
        this.element = element;
        this.resized = new EventEmitter();
    }
    /**
     * @return {?}
     */
    ResizedDirective.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.resizeEvent = new ResizeSensor(this.element.nativeElement, (/**
         * @param {?} x
         * @return {?}
         */
        function (x) { return _this.onResized(); }));
        this.onResized();
    };
    /**
     * @private
     * @return {?}
     */
    ResizedDirective.prototype.onResized = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var newWidth = this.element.nativeElement.clientWidth;
        /** @type {?} */
        var newHeight = this.element.nativeElement.clientHeight;
        if (newWidth === this.oldWidth && newHeight === this.oldHeight) {
            return;
        }
        /** @type {?} */
        var event = new ResizedEvent(this.element, newWidth, newHeight, this.oldWidth, this.oldHeight);
        this.oldWidth = this.element.nativeElement.clientWidth;
        this.oldHeight = this.element.nativeElement.clientHeight;
        this.resized.next(event);
    };
    ResizedDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[materiaResized]',
                    exportAs: 'materiaResized'
                },] }
    ];
    /** @nocollapse */
    ResizedDirective.ctorParameters = function () { return [
        { type: ElementRef }
    ]; };
    ResizedDirective.propDecorators = {
        resized: [{ type: Output }]
    };
    return ResizedDirective;
}());
export { ResizedDirective };
if (false) {
    /** @type {?} */
    ResizedDirective.prototype.resized;
    /**
     * @type {?}
     * @private
     */
    ResizedDirective.prototype.oldWidth;
    /**
     * @type {?}
     * @private
     */
    ResizedDirective.prototype.oldHeight;
    /**
     * @type {?}
     * @private
     */
    ResizedDirective.prototype.resizeEvent;
    /**
     * @type {?}
     * @private
     */
    ResizedDirective.prototype.element;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVzaXplZC1ldmVudC5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AbWF0ZXJpYS11aS9uZ3gtbW9uYWNvLWVkaXRvci8iLCJzb3VyY2VzIjpbImxpYi9kaXJlY3RpdmVzL3Jlc2l6ZWQtZXZlbnQuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxVQUFVLEVBQUUsWUFBWSxFQUFFLE1BQU0sRUFBVSxNQUFNLGVBQWUsQ0FBQztBQUNwRixPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFFbkQ7SUFDSSxzQkFDYSxPQUFtQixFQUNuQixRQUFnQixFQUNoQixTQUFpQixFQUNqQixRQUFnQixFQUNoQixTQUFpQjtRQUpqQixZQUFPLEdBQVAsT0FBTyxDQUFZO1FBQ25CLGFBQVEsR0FBUixRQUFRLENBQVE7UUFDaEIsY0FBUyxHQUFULFNBQVMsQ0FBUTtRQUNqQixhQUFRLEdBQVIsUUFBUSxDQUFRO1FBQ2hCLGNBQVMsR0FBVCxTQUFTLENBQVE7SUFDMUIsQ0FBQztJQUNULG1CQUFDO0FBQUQsQ0FBQyxBQVJELElBUUM7Ozs7SUFOTywrQkFBNEI7O0lBQzVCLGdDQUF5Qjs7SUFDekIsaUNBQTBCOztJQUMxQixnQ0FBeUI7O0lBQ3pCLGlDQUEwQjs7QUFJbEM7SUFZSSwwQkFBNkIsT0FBbUI7UUFBbkIsWUFBTyxHQUFQLE9BQU8sQ0FBWTtRQU50QyxZQUFPLEdBQUcsSUFBSSxZQUFZLEVBQWdCLENBQUM7SUFPckQsQ0FBQzs7OztJQUVELG1DQUFROzs7SUFBUjtRQUFBLGlCQUdDO1FBRkcsSUFBSSxDQUFDLFdBQVcsR0FBRyxJQUFJLFlBQVksQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLGFBQWE7Ozs7UUFBRSxVQUFBLENBQUMsSUFBSSxPQUFBLEtBQUksQ0FBQyxTQUFTLEVBQUUsRUFBaEIsQ0FBZ0IsRUFBQyxDQUFDO1FBQ3ZGLElBQUksQ0FBQyxTQUFTLEVBQUUsQ0FBQztJQUNyQixDQUFDOzs7OztJQUVPLG9DQUFTOzs7O0lBQWpCOztZQUNVLFFBQVEsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLGFBQWEsQ0FBQyxXQUFXOztZQUNqRCxTQUFTLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxhQUFhLENBQUMsWUFBWTtRQUV6RCxJQUFJLFFBQVEsS0FBSyxJQUFJLENBQUMsUUFBUSxJQUFJLFNBQVMsS0FBSyxJQUFJLENBQUMsU0FBUyxFQUFFO1lBQzVELE9BQU87U0FDVjs7WUFFSyxLQUFLLEdBQUcsSUFBSSxZQUFZLENBQzFCLElBQUksQ0FBQyxPQUFPLEVBQ1osUUFBUSxFQUNSLFNBQVMsRUFDVCxJQUFJLENBQUMsUUFBUSxFQUNiLElBQUksQ0FBQyxTQUFTLENBQUM7UUFFbkIsSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLGFBQWEsQ0FBQyxXQUFXLENBQUM7UUFDdkQsSUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLGFBQWEsQ0FBQyxZQUFZLENBQUM7UUFFekQsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDN0IsQ0FBQzs7Z0JBdkNKLFNBQVMsU0FBQztvQkFDUCxRQUFRLEVBQUUsa0JBQWtCO29CQUM1QixRQUFRLEVBQUUsZ0JBQWdCO2lCQUM3Qjs7OztnQkFoQm1CLFVBQVU7OzswQkFtQnpCLE1BQU07O0lBbUNYLHVCQUFDO0NBQUEsQUF6Q0QsSUF5Q0M7U0FyQ1ksZ0JBQWdCOzs7SUFFekIsbUNBQXFEOzs7OztJQUVyRCxvQ0FBeUI7Ozs7O0lBQ3pCLHFDQUEwQjs7Ozs7SUFDMUIsdUNBQWtDOzs7OztJQUV0QixtQ0FBb0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEaXJlY3RpdmUsIEVsZW1lbnRSZWYsIEV2ZW50RW1pdHRlciwgT3V0cHV0LCBPbkluaXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFJlc2l6ZVNlbnNvciB9IGZyb20gJ2Nzcy1lbGVtZW50LXF1ZXJpZXMnO1xuXG5leHBvcnQgY2xhc3MgUmVzaXplZEV2ZW50IHtcbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgcmVhZG9ubHkgZWxlbWVudDogRWxlbWVudFJlZixcbiAgICAgICAgcmVhZG9ubHkgbmV3V2lkdGg6IG51bWJlcixcbiAgICAgICAgcmVhZG9ubHkgbmV3SGVpZ2h0OiBudW1iZXIsXG4gICAgICAgIHJlYWRvbmx5IG9sZFdpZHRoOiBudW1iZXIsXG4gICAgICAgIHJlYWRvbmx5IG9sZEhlaWdodDogbnVtYmVyXG4gICAgKSB7IH1cbn1cblxuQERpcmVjdGl2ZSh7XG4gICAgc2VsZWN0b3I6ICdbbWF0ZXJpYVJlc2l6ZWRdJyxcbiAgICBleHBvcnRBczogJ21hdGVyaWFSZXNpemVkJ1xufSlcbmV4cG9ydCBjbGFzcyBSZXNpemVkRGlyZWN0aXZlIGltcGxlbWVudHMgT25Jbml0IHtcblxuICAgIEBPdXRwdXQoKSByZXNpemVkID0gbmV3IEV2ZW50RW1pdHRlcjxSZXNpemVkRXZlbnQ+KCk7XG5cbiAgICBwcml2YXRlIG9sZFdpZHRoOiBudW1iZXI7XG4gICAgcHJpdmF0ZSBvbGRIZWlnaHQ6IG51bWJlcjtcbiAgICBwcml2YXRlIHJlc2l6ZUV2ZW50OiBSZXNpemVTZW5zb3I7XG5cbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIHJlYWRvbmx5IGVsZW1lbnQ6IEVsZW1lbnRSZWYpIHtcbiAgICB9XG5cbiAgICBuZ09uSW5pdCgpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5yZXNpemVFdmVudCA9IG5ldyBSZXNpemVTZW5zb3IodGhpcy5lbGVtZW50Lm5hdGl2ZUVsZW1lbnQsIHggPT4gdGhpcy5vblJlc2l6ZWQoKSk7XG4gICAgICAgIHRoaXMub25SZXNpemVkKCk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBvblJlc2l6ZWQoKTogdm9pZCB7XG4gICAgICAgIGNvbnN0IG5ld1dpZHRoID0gdGhpcy5lbGVtZW50Lm5hdGl2ZUVsZW1lbnQuY2xpZW50V2lkdGg7XG4gICAgICAgIGNvbnN0IG5ld0hlaWdodCA9IHRoaXMuZWxlbWVudC5uYXRpdmVFbGVtZW50LmNsaWVudEhlaWdodDtcblxuICAgICAgICBpZiAobmV3V2lkdGggPT09IHRoaXMub2xkV2lkdGggJiYgbmV3SGVpZ2h0ID09PSB0aGlzLm9sZEhlaWdodCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgZXZlbnQgPSBuZXcgUmVzaXplZEV2ZW50KFxuICAgICAgICAgICAgdGhpcy5lbGVtZW50LFxuICAgICAgICAgICAgbmV3V2lkdGgsXG4gICAgICAgICAgICBuZXdIZWlnaHQsXG4gICAgICAgICAgICB0aGlzLm9sZFdpZHRoLFxuICAgICAgICAgICAgdGhpcy5vbGRIZWlnaHQpO1xuXG4gICAgICAgIHRoaXMub2xkV2lkdGggPSB0aGlzLmVsZW1lbnQubmF0aXZlRWxlbWVudC5jbGllbnRXaWR0aDtcbiAgICAgICAgdGhpcy5vbGRIZWlnaHQgPSB0aGlzLmVsZW1lbnQubmF0aXZlRWxlbWVudC5jbGllbnRIZWlnaHQ7XG5cbiAgICAgICAgdGhpcy5yZXNpemVkLm5leHQoZXZlbnQpO1xuICAgIH1cblxufVxuIl19
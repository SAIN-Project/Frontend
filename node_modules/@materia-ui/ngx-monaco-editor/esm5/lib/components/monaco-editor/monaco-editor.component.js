/**
 * @fileoverview added by tsickle
 * Generated from: lib/components/monaco-editor/monaco-editor.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ViewChild, ElementRef, EventEmitter, Input, ChangeDetectionStrategy, forwardRef, Output } from '@angular/core';
import { NG_VALUE_ACCESSOR, NG_VALIDATORS } from '@angular/forms';
import { filter, take } from 'rxjs/operators';
import { MonacoEditorLoaderService } from '../../services/monaco-editor-loader.service';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '../../services/monaco-editor-loader.service';
import * as ɵngcc2 from '../../directives/resized-event.directive';

var _c0 = ["editor"];
var MonacoEditorComponent = /** @class */ (function () {
    function MonacoEditorComponent(monacoLoader) {
        this.monacoLoader = monacoLoader;
        this.init = new EventEmitter();
        this.propagateChange = (/**
         * @param {?} _
         * @return {?}
         */
        function (_) { });
    }
    /**
     * @return {?}
     */
    MonacoEditorComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.container = this.editorContent.nativeElement;
        this.monacoLoader.isMonacoLoaded$.pipe(filter((/**
         * @param {?} isLoaded
         * @return {?}
         */
        function (isLoaded) { return isLoaded; })), take(1)).subscribe((/**
         * @return {?}
         */
        function () {
            _this.initMonaco();
        }));
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    MonacoEditorComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        if (this.editor && changes.options && !changes.options.firstChange) {
            if (changes.options.previousValue.language !== changes.options.currentValue.language) {
                monaco.editor.setModelLanguage(this.editor.getModel(), this.options && this.options.language ? this.options.language : 'text');
            }
            if (changes.options.previousValue.theme !== changes.options.currentValue.theme) {
                monaco.editor.setTheme(changes.options.currentValue.theme);
            }
            this.editor.updateOptions(changes.options.currentValue);
        }
    };
    /**
     * @param {?} value
     * @return {?}
     */
    MonacoEditorComponent.prototype.writeValue = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        this.value = value;
        if (this.editor && value) {
            this.editor.setValue(value);
        }
        else if (this.editor) {
            this.editor.setValue('');
        }
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    MonacoEditorComponent.prototype.registerOnChange = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.propagateChange = fn;
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    MonacoEditorComponent.prototype.registerOnTouched = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.onTouched = fn;
    };
    /**
     * @return {?}
     */
    MonacoEditorComponent.prototype.validate = /**
     * @return {?}
     */
    function () {
        return (!this.parseError) ? null : {
            parseError: {
                valid: false,
            }
        };
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    MonacoEditorComponent.prototype.registerOnValidatorChange = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.onErrorStatusChange = fn;
    };
    /**
     * @private
     * @return {?}
     */
    MonacoEditorComponent.prototype.initMonaco = /**
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var opts = {
            value: [this.value].join('\n'),
            language: 'text',
            automaticLayout: true,
            scrollBeyondLastLine: false,
            theme: 'vc'
        };
        if (this.options) {
            opts = Object.assign({}, opts, this.options);
        }
        this.editor = monaco.editor.create(this.container, opts);
        this.editor.layout();
        this.editor.onDidChangeModelContent((/**
         * @return {?}
         */
        function () {
            _this.propagateChange(_this.editor.getValue());
        }));
        this.editor.onDidChangeModelDecorations((/**
         * @return {?}
         */
        function () {
            /** @type {?} */
            var pastParseError = _this.parseError;
            if (monaco.editor.getModelMarkers({}).map((/**
             * @param {?} m
             * @return {?}
             */
            function (m) { return m.message; })).join(', ')) {
                _this.parseError = true;
            }
            else {
                _this.parseError = false;
            }
            if (pastParseError !== _this.parseError) {
                _this.onErrorStatusChange();
            }
        }));
        this.editor.onDidBlurEditorText((/**
         * @return {?}
         */
        function () {
            _this.onTouched();
        }));
        this.init.emit(this.editor);
    };
    /**
     * @param {?} event
     * @return {?}
     */
    MonacoEditorComponent.prototype.onResized = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (this.editor) {
            this.editor.layout({
                width: event.newWidth,
                height: event.newHeight
            });
        }
    };
    /**
     * @return {?}
     */
    MonacoEditorComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        if (this.editor) {
            this.editor.dispose();
        }
    };
    /** @nocollapse */
    MonacoEditorComponent.ctorParameters = function () { return [
        { type: MonacoEditorLoaderService }
    ]; };
    MonacoEditorComponent.propDecorators = {
        options: [{ type: Input }],
        init: [{ type: Output }],
        editorContent: [{ type: ViewChild, args: ['editor', { static: true },] }]
    };
MonacoEditorComponent.ɵfac = function MonacoEditorComponent_Factory(t) { return new (t || MonacoEditorComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.MonacoEditorLoaderService)); };
MonacoEditorComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MonacoEditorComponent, selectors: [["ngx-monaco-editor"]], viewQuery: function MonacoEditorComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵstaticViewQuery(_c0, true);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.editorContent = _t.first);
    } }, inputs: { options: "options" }, outputs: { init: "init" }, features: [ɵngcc0.ɵɵProvidersFeature([
            {
                provide: NG_VALUE_ACCESSOR,
                useExisting: forwardRef(( /**
                 * @return {?}
                 */function () { return MonacoEditorComponent; })),
                multi: true
            },
            {
                provide: NG_VALIDATORS,
                useExisting: forwardRef(( /**
                 * @return {?}
                 */function () { return MonacoEditorComponent; })),
                multi: true
            }
        ]), ɵngcc0.ɵɵNgOnChangesFeature], decls: 5, vars: 4, consts: [["materiaResized", "", "fxFlex", "", 1, "editor-container", 3, "resized"], ["container", ""], [1, "wrapper"], [1, "monaco-editor", 2, "min-width", "0"], ["editor", ""]], template: function MonacoEditorComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div", 0, 1);
        ɵngcc0.ɵɵlistener("resized", function MonacoEditorComponent_Template_div_resized_0_listener($event) { return ctx.onResized($event); });
        ɵngcc0.ɵɵelementStart(2, "div", 2);
        ɵngcc0.ɵɵelement(3, "div", 3, 4);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        var _r0 = ɵngcc0.ɵɵreference(1);
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵstyleProp("width", _r0.offsetWidth, "px")("height", _r0.offsetHeight, "px");
    } }, directives: [ɵngcc2.ResizedDirective], styles: ["[_nghost-%COMP%] {\n\tflex: 1;\n\tbox-sizing: border-box;\n\tflex-direction: column;\n\tdisplay: flex;\n\toverflow: hidden;\n\tmax-width: 100%;\n\tmin-wdith: 0;\n}\n.wrapper[_ngcontent-%COMP%] {\n\twidth: 0px; height: 0px;\n}\n.editor-container[_ngcontent-%COMP%] {\n\ttext-overflow: ellipsis;\n\toverflow: hidden;\n\tposition: relative;\n\tmin-width: 0;\n\tdisplay: table;\n\twidth: 100%;\n\theight: 100%;\n}"], changeDetection: 0 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MonacoEditorComponent, [{
        type: Component,
        args: [{
                selector: 'ngx-monaco-editor',
                template: "<div #container materiaResized (resized)=\"onResized($event)\" class=\"editor-container\" fxFlex>\n\t<div class=\"wrapper\">\n\t\t<div\n\t\t\t#editor\n\t\t\tclass=\"monaco-editor\"\n\t\t\t[style.width.px]=\"container.offsetWidth\"\n\t\t\t[style.height.px]=\"container.offsetHeight\" style=\"min-width: 0;\"\n\t\t></div>\n\t</div>\n</div>",
                changeDetection: ChangeDetectionStrategy.OnPush,
                providers: [
                    {
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: forwardRef(( /**
                         * @return {?}
                         */function () { return MonacoEditorComponent; })),
                        multi: true
                    },
                    {
                        provide: NG_VALIDATORS,
                        useExisting: forwardRef(( /**
                         * @return {?}
                         */function () { return MonacoEditorComponent; })),
                        multi: true
                    }
                ],
                styles: [":host {\n\tflex: 1;\n\tbox-sizing: border-box;\n\tflex-direction: column;\n\tdisplay: flex;\n\toverflow: hidden;\n\tmax-width: 100%;\n\tmin-wdith: 0;\n}\n.wrapper {\n\twidth: 0px; height: 0px;\n}\n.editor-container {\n\ttext-overflow: ellipsis;\n\toverflow: hidden;\n\tposition: relative;\n\tmin-width: 0;\n\tdisplay: table;\n\twidth: 100%;\n\theight: 100%;\n}"]
            }]
    }], function () { return [{ type: ɵngcc1.MonacoEditorLoaderService }]; }, { init: [{
            type: Output
        }], options: [{
            type: Input
        }], editorContent: [{
            type: ViewChild,
            args: ['editor', { static: true }]
        }] }); })();
    return MonacoEditorComponent;
}());
export { MonacoEditorComponent };
if (false) {
    /** @type {?} */
    MonacoEditorComponent.prototype.options;
    /** @type {?} */
    MonacoEditorComponent.prototype.init;
    /** @type {?} */
    MonacoEditorComponent.prototype.editorContent;
    /** @type {?} */
    MonacoEditorComponent.prototype.container;
    /** @type {?} */
    MonacoEditorComponent.prototype.editor;
    /** @type {?} */
    MonacoEditorComponent.prototype.value;
    /** @type {?} */
    MonacoEditorComponent.prototype.parseError;
    /**
     * @type {?}
     * @private
     */
    MonacoEditorComponent.prototype.onTouched;
    /**
     * @type {?}
     * @private
     */
    MonacoEditorComponent.prototype.onErrorStatusChange;
    /**
     * @type {?}
     * @private
     */
    MonacoEditorComponent.prototype.propagateChange;
    /**
     * @type {?}
     * @private
     */
    MonacoEditorComponent.prototype.monacoLoader;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
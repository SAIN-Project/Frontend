/**
 * @fileoverview added by tsickle
 * Generated from: lib/components/monaco-diff-editor/monaco-diff-editor.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ViewChild, ElementRef, EventEmitter, Output, Input, ChangeDetectionStrategy } from '@angular/core';
import { filter, take } from 'rxjs/operators';
import { MonacoEditorLoaderService } from '../../services/monaco-editor-loader.service';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '../../services/monaco-editor-loader.service';
import * as ɵngcc2 from '../../directives/resized-event.directive';

var _c0 = ["diffEditor"];
var MonacoDiffEditorComponent = /** @class */ (function () {
    function MonacoDiffEditorComponent(monacoLoader) {
        this.monacoLoader = monacoLoader;
        this.init = new EventEmitter();
    }
    /**
     * @return {?}
     */
    MonacoDiffEditorComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.container = this.editorContent.nativeElement;
        this.monacoLoader.isMonacoLoaded$.pipe(filter((/**
         * @param {?} isLoaded
         * @return {?}
         */
        function (isLoaded) { return isLoaded; })), take(1)).subscribe((/**
         * @return {?}
         */
        function () {
            _this.initMonaco();
        }));
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    MonacoDiffEditorComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        if (this.editor && ((changes.code && !changes.code.firstChange) || (changes.modified && !changes.modified.firstChange))) {
            /** @type {?} */
            var modified = monaco.editor.createModel(this.modified);
            /** @type {?} */
            var original = monaco.editor.createModel(this.original);
            this.editor.setModel({
                original: original,
                modified: modified
            });
        }
        if (this.editor &&
            changes.options &&
            !changes.options.firstChange) {
            if (changes.options.previousValue.theme !== changes.options.currentValue.theme) {
                monaco.editor.setTheme(changes.options.currentValue.theme);
            }
            this.editor.updateOptions(changes.options.currentValue);
        }
    };
    /**
     * @private
     * @return {?}
     */
    MonacoDiffEditorComponent.prototype.initMonaco = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var opts = {
            readOnly: true,
            theme: 'vc'
        };
        if (this.options) {
            opts = Object.assign({}, opts, this.options);
        }
        this.editor = monaco.editor.createDiffEditor(this.container, opts);
        /** @type {?} */
        var original = monaco.editor.createModel(this.original);
        /** @type {?} */
        var modified = monaco.editor.createModel(this.modified);
        this.editor.setModel({
            original: original,
            modified: modified
        });
        this.editor.layout();
        this.init.emit(this.editor);
    };
    /**
     * @param {?} event
     * @return {?}
     */
    MonacoDiffEditorComponent.prototype.onResized = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (this.editor) {
            this.editor.layout({
                width: event.newWidth,
                height: event.newHeight
            });
        }
    };
    /**
     * @return {?}
     */
    MonacoDiffEditorComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        if (this.editor) {
            this.editor.dispose();
        }
    };
    /** @nocollapse */
    MonacoDiffEditorComponent.ctorParameters = function () { return [
        { type: MonacoEditorLoaderService }
    ]; };
    MonacoDiffEditorComponent.propDecorators = {
        original: [{ type: Input }],
        modified: [{ type: Input }],
        options: [{ type: Input }],
        init: [{ type: Output }],
        editorContent: [{ type: ViewChild, args: ['diffEditor', { static: true },] }]
    };
MonacoDiffEditorComponent.ɵfac = function MonacoDiffEditorComponent_Factory(t) { return new (t || MonacoDiffEditorComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc1.MonacoEditorLoaderService)); };
MonacoDiffEditorComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: MonacoDiffEditorComponent, selectors: [["ngx-monaco-diff-editor"]], viewQuery: function MonacoDiffEditorComponent_Query(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵstaticViewQuery(_c0, true);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.editorContent = _t.first);
    } }, inputs: { original: "original", modified: "modified", options: "options" }, outputs: { init: "init" }, features: [ɵngcc0.ɵɵNgOnChangesFeature], decls: 5, vars: 4, consts: [["materiaResized", "", "fxFlex", "", 1, "editor-container", 3, "resized"], ["container", ""], [1, "wrapper"], [1, "monaco-editor", 2, "min-width", "0"], ["diffEditor", ""]], template: function MonacoDiffEditorComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div", 0, 1);
        ɵngcc0.ɵɵlistener("resized", function MonacoDiffEditorComponent_Template_div_resized_0_listener($event) { return ctx.onResized($event); });
        ɵngcc0.ɵɵelementStart(2, "div", 2);
        ɵngcc0.ɵɵelement(3, "div", 3, 4);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        var _r0 = ɵngcc0.ɵɵreference(1);
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵstyleProp("width", _r0.offsetWidth, "px")("height", _r0.offsetHeight, "px");
    } }, directives: [ɵngcc2.ResizedDirective], styles: ["[_nghost-%COMP%] {\nflex: 1;\nbox-sizing: border-box;\nflex-direction: column;\ndisplay: flex;\noverflow: hidden;\nmax-width: 100%;\nmin-wdith: 0;\n}\n.wrapper[_ngcontent-%COMP%] {\nwidth: 0px; height: 0px;\n}\n.editor-container[_ngcontent-%COMP%] {\ntext-overflow: ellipsis;\noverflow: hidden;\nposition: relative;\nmin-width: 0;\ndisplay: table;\nwidth: 100%;\nheight: 100%;\n}"], changeDetection: 0 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MonacoDiffEditorComponent, [{
        type: Component,
        args: [{
                selector: 'ngx-monaco-diff-editor',
                template: "<div #container materiaResized (resized)=\"onResized($event)\" class=\"editor-container\" fxFlex>\n<div class=\"wrapper\">\n  <div\n    #diffEditor\n    class=\"monaco-editor\"\n    [style.width.px]=\"container.offsetWidth\"\n    [style.height.px]=\"container.offsetHeight\" style=\"min-width: 0;\"\n  ></div>\n</div>\n</div>",
                changeDetection: ChangeDetectionStrategy.OnPush,
                styles: [":host {\nflex: 1;\nbox-sizing: border-box;\nflex-direction: column;\ndisplay: flex;\noverflow: hidden;\nmax-width: 100%;\nmin-wdith: 0;\n}\n.wrapper {\nwidth: 0px; height: 0px;\n}\n.editor-container {\ntext-overflow: ellipsis;\noverflow: hidden;\nposition: relative;\nmin-width: 0;\ndisplay: table;\nwidth: 100%;\nheight: 100%;\n}"]
            }]
    }], function () { return [{ type: ɵngcc1.MonacoEditorLoaderService }]; }, { init: [{
            type: Output
        }], original: [{
            type: Input
        }], modified: [{
            type: Input
        }], options: [{
            type: Input
        }], editorContent: [{
            type: ViewChild,
            args: ['diffEditor', { static: true }]
        }] }); })();
    return MonacoDiffEditorComponent;
}());
export { MonacoDiffEditorComponent };
if (false) {
    /** @type {?} */
    MonacoDiffEditorComponent.prototype.container;
    /** @type {?} */
    MonacoDiffEditorComponent.prototype.editor;
    /** @type {?} */
    MonacoDiffEditorComponent.prototype.original;
    /** @type {?} */
    MonacoDiffEditorComponent.prototype.modified;
    /** @type {?} */
    MonacoDiffEditorComponent.prototype.options;
    /** @type {?} */
    MonacoDiffEditorComponent.prototype.init;
    /** @type {?} */
    MonacoDiffEditorComponent.prototype.editorContent;
    /**
     * @type {?}
     * @private
     */
    MonacoDiffEditorComponent.prototype.monacoLoader;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
/**
 * @fileoverview added by tsickle
 * Generated from: lib/components/monaco-diff-editor/monaco-diff-editor.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ViewChild, ElementRef, EventEmitter, Output, Input, ChangeDetectionStrategy } from '@angular/core';
import { filter, take } from 'rxjs/operators';
import { MonacoEditorLoaderService } from '../../services/monaco-editor-loader.service';
var MonacoDiffEditorComponent = /** @class */ (function () {
    function MonacoDiffEditorComponent(monacoLoader) {
        this.monacoLoader = monacoLoader;
        this.init = new EventEmitter();
    }
    /**
     * @return {?}
     */
    MonacoDiffEditorComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.container = this.editorContent.nativeElement;
        this.monacoLoader.isMonacoLoaded$.pipe(filter((/**
         * @param {?} isLoaded
         * @return {?}
         */
        function (isLoaded) { return isLoaded; })), take(1)).subscribe((/**
         * @return {?}
         */
        function () {
            _this.initMonaco();
        }));
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    MonacoDiffEditorComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        if (this.editor && ((changes.code && !changes.code.firstChange) || (changes.modified && !changes.modified.firstChange))) {
            /** @type {?} */
            var modified = monaco.editor.createModel(this.modified);
            /** @type {?} */
            var original = monaco.editor.createModel(this.original);
            this.editor.setModel({
                original: original,
                modified: modified
            });
        }
        if (this.editor &&
            changes.options &&
            !changes.options.firstChange) {
            if (changes.options.previousValue.theme !== changes.options.currentValue.theme) {
                monaco.editor.setTheme(changes.options.currentValue.theme);
            }
            this.editor.updateOptions(changes.options.currentValue);
        }
    };
    /**
     * @private
     * @return {?}
     */
    MonacoDiffEditorComponent.prototype.initMonaco = /**
     * @private
     * @return {?}
     */
    function () {
        /** @type {?} */
        var opts = {
            readOnly: true,
            theme: 'vc'
        };
        if (this.options) {
            opts = Object.assign({}, opts, this.options);
        }
        this.editor = monaco.editor.createDiffEditor(this.container, opts);
        /** @type {?} */
        var original = monaco.editor.createModel(this.original);
        /** @type {?} */
        var modified = monaco.editor.createModel(this.modified);
        this.editor.setModel({
            original: original,
            modified: modified
        });
        this.editor.layout();
        this.init.emit(this.editor);
    };
    /**
     * @param {?} event
     * @return {?}
     */
    MonacoDiffEditorComponent.prototype.onResized = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (this.editor) {
            this.editor.layout({
                width: event.newWidth,
                height: event.newHeight
            });
        }
    };
    /**
     * @return {?}
     */
    MonacoDiffEditorComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        if (this.editor) {
            this.editor.dispose();
        }
    };
    MonacoDiffEditorComponent.decorators = [
        { type: Component, args: [{
                    selector: 'ngx-monaco-diff-editor',
                    template: "<div #container materiaResized (resized)=\"onResized($event)\" class=\"editor-container\" fxFlex>\n<div class=\"wrapper\">\n  <div\n    #diffEditor\n    class=\"monaco-editor\"\n    [style.width.px]=\"container.offsetWidth\"\n    [style.height.px]=\"container.offsetHeight\" style=\"min-width: 0;\"\n  ></div>\n</div>\n</div>",
                    changeDetection: ChangeDetectionStrategy.OnPush,
                    styles: [":host {\nflex: 1;\nbox-sizing: border-box;\nflex-direction: column;\ndisplay: flex;\noverflow: hidden;\nmax-width: 100%;\nmin-wdith: 0;\n}\n.wrapper {\nwidth: 0px; height: 0px;\n}\n.editor-container {\ntext-overflow: ellipsis;\noverflow: hidden;\nposition: relative;\nmin-width: 0;\ndisplay: table;\nwidth: 100%;\nheight: 100%;\n}"]
                }] }
    ];
    /** @nocollapse */
    MonacoDiffEditorComponent.ctorParameters = function () { return [
        { type: MonacoEditorLoaderService }
    ]; };
    MonacoDiffEditorComponent.propDecorators = {
        original: [{ type: Input }],
        modified: [{ type: Input }],
        options: [{ type: Input }],
        init: [{ type: Output }],
        editorContent: [{ type: ViewChild, args: ['diffEditor', { static: true },] }]
    };
    return MonacoDiffEditorComponent;
}());
export { MonacoDiffEditorComponent };
if (false) {
    /** @type {?} */
    MonacoDiffEditorComponent.prototype.container;
    /** @type {?} */
    MonacoDiffEditorComponent.prototype.editor;
    /** @type {?} */
    MonacoDiffEditorComponent.prototype.original;
    /** @type {?} */
    MonacoDiffEditorComponent.prototype.modified;
    /** @type {?} */
    MonacoDiffEditorComponent.prototype.options;
    /** @type {?} */
    MonacoDiffEditorComponent.prototype.init;
    /** @type {?} */
    MonacoDiffEditorComponent.prototype.editorContent;
    /**
     * @type {?}
     * @private
     */
    MonacoDiffEditorComponent.prototype.monacoLoader;
}
//# sourceMappingURL=data:application/json;base64,
/**
 * @fileoverview added by tsickle
 * Generated from: lib/services/monaco-editor-loader.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable, NgZone, Optional, Inject } from '@angular/core';
import { BehaviorSubject } from 'rxjs';
import { MONACO_PATH } from '../interfaces';
import * as i0 from "@angular/core";
import * as ɵngcc0 from '@angular/core';
var MonacoEditorLoaderService = /** @class */ (function () {
    function MonacoEditorLoaderService(ngZone, monacoPathConfig) {
        var _this = this;
        this.ngZone = ngZone;
        this.monacoPathConfig = monacoPathConfig;
        this.isMonacoLoaded$ = new BehaviorSubject(false);
        this._monacoPath = 'assets/monaco-editor/min/vs';
        if (((/** @type {?} */ (window))).monacoEditorAlreadyInitialized) {
            ngZone.run((/**
             * @return {?}
             */
            function () { return _this.isMonacoLoaded$.next(true); }));
            return;
        }
        ((/** @type {?} */ (window))).monacoEditorAlreadyInitialized = true;
        if (this.monacoPathConfig) {
            this.monacoPath = this.monacoPathConfig;
        }
        this.loadMonaco();
    }
    Object.defineProperty(MonacoEditorLoaderService.prototype, "monacoPath", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (value) {
                this._monacoPath = value;
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    MonacoEditorLoaderService.prototype.loadMonaco = /**
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var onGotAmdLoader = (/**
         * @return {?}
         */
        function () {
            // Load monaco
            ((/** @type {?} */ (window))).amdRequire = ((/** @type {?} */ (window))).require;
            if (_this.nodeRequire) {
                ((/** @type {?} */ (window))).require = _this.nodeRequire;
            }
            ((/** @type {?} */ (window))).amdRequire.config({ paths: { 'vs': _this._monacoPath } });
            ((/** @type {?} */ (window))).amdRequire(['vs/editor/editor.main'], (/**
             * @return {?}
             */
            function () {
                _this.ngZone.run((/**
                 * @return {?}
                 */
                function () { return _this.isMonacoLoaded$.next(true); }));
            }));
        });
        /** @type {?} */
        var loaderScript = null;
        // Load AMD loader if necessary
        if (!((/** @type {?} */ (window))).require && !((/** @type {?} */ (window))).amdRequire) {
            loaderScript = document.createElement('script');
            loaderScript.type = 'text/javascript';
            loaderScript.src = this._monacoPath + "/loader.js";
            loaderScript.addEventListener('load', onGotAmdLoader);
            document.body.appendChild(loaderScript);
        }
        else if (!((/** @type {?} */ (window))).amdRequire) {
            this.addElectronFixScripts();
            this.nodeRequire = ((/** @type {?} */ (window))).require;
            loaderScript = document.createElement('script');
            loaderScript.type = 'text/javascript';
            loaderScript.src = this._monacoPath + "/loader.js";
            loaderScript.addEventListener('load', onGotAmdLoader);
            document.body.appendChild(loaderScript);
        }
        else {
            onGotAmdLoader();
        }
    };
    /**
     * @return {?}
     */
    MonacoEditorLoaderService.prototype.addElectronFixScripts = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var electronFixScript = document.createElement('script');
        // workaround monaco-css not understanding the environment
        /** @type {?} */
        var inlineScript = document.createTextNode('self.module = undefined;');
        // workaround monaco-typescript not understanding the environment
        /** @type {?} */
        var inlineScript2 = document.createTextNode('self.process.browser = true;');
        electronFixScript.appendChild(inlineScript);
        electronFixScript.appendChild(inlineScript2);
        document.body.appendChild(electronFixScript);
    };
    /** @nocollapse */
    MonacoEditorLoaderService.ctorParameters = function () { return [
        { type: NgZone },
        { type: String, decorators: [{ type: Optional }, { type: Inject, args: [MONACO_PATH,] }] }
    ]; };
    /** @nocollapse */ MonacoEditorLoaderService.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function MonacoEditorLoaderService_Factory() { return new MonacoEditorLoaderService(i0.ɵɵinject(i0.NgZone), i0.ɵɵinject("MONACO_PATH", 8)); }, token: MonacoEditorLoaderService, providedIn: "root" });
MonacoEditorLoaderService.ɵfac = function MonacoEditorLoaderService_Factory(t) { return new (t || MonacoEditorLoaderService)(ɵngcc0.ɵɵinject(ɵngcc0.NgZone), ɵngcc0.ɵɵinject(MONACO_PATH, 8)); };
MonacoEditorLoaderService.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: MonacoEditorLoaderService, factory: function (t) { return MonacoEditorLoaderService.ɵfac(t); }, providedIn: 'root' });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(MonacoEditorLoaderService, [{
        type: Injectable,
        args: [{ providedIn: 'root' }]
    }], function () { return [{ type: ɵngcc0.NgZone }, { type: String, decorators: [{
                type: Optional
            }, {
                type: Inject,
                args: [MONACO_PATH]
            }] }]; }, null); })();
    return MonacoEditorLoaderService;
}());
export { MonacoEditorLoaderService };
if (false) {
    /** @type {?} */
    MonacoEditorLoaderService.prototype.nodeRequire;
    /** @type {?} */
    MonacoEditorLoaderService.prototype.isMonacoLoaded$;
    /**
     * @type {?}
     * @private
     */
    MonacoEditorLoaderService.prototype._monacoPath;
    /**
     * @type {?}
     * @private
     */
    MonacoEditorLoaderService.prototype.ngZone;
    /** @type {?} */
    MonacoEditorLoaderService.prototype.monacoPathConfig;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
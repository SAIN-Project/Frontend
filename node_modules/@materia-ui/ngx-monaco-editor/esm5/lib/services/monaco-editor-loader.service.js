/**
 * @fileoverview added by tsickle
 * Generated from: lib/services/monaco-editor-loader.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable, NgZone, Optional, Inject } from '@angular/core';
import { BehaviorSubject } from 'rxjs';
import { MONACO_PATH } from '../interfaces';
import * as i0 from "@angular/core";
var MonacoEditorLoaderService = /** @class */ (function () {
    function MonacoEditorLoaderService(ngZone, monacoPathConfig) {
        var _this = this;
        this.ngZone = ngZone;
        this.monacoPathConfig = monacoPathConfig;
        this.isMonacoLoaded$ = new BehaviorSubject(false);
        this._monacoPath = 'assets/monaco-editor/min/vs';
        if (((/** @type {?} */ (window))).monacoEditorAlreadyInitialized) {
            ngZone.run((/**
             * @return {?}
             */
            function () { return _this.isMonacoLoaded$.next(true); }));
            return;
        }
        ((/** @type {?} */ (window))).monacoEditorAlreadyInitialized = true;
        if (this.monacoPathConfig) {
            this.monacoPath = this.monacoPathConfig;
        }
        this.loadMonaco();
    }
    Object.defineProperty(MonacoEditorLoaderService.prototype, "monacoPath", {
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (value) {
                this._monacoPath = value;
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    MonacoEditorLoaderService.prototype.loadMonaco = /**
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var onGotAmdLoader = (/**
         * @return {?}
         */
        function () {
            // Load monaco
            ((/** @type {?} */ (window))).amdRequire = ((/** @type {?} */ (window))).require;
            if (_this.nodeRequire) {
                ((/** @type {?} */ (window))).require = _this.nodeRequire;
            }
            ((/** @type {?} */ (window))).amdRequire.config({ paths: { 'vs': _this._monacoPath } });
            ((/** @type {?} */ (window))).amdRequire(['vs/editor/editor.main'], (/**
             * @return {?}
             */
            function () {
                _this.ngZone.run((/**
                 * @return {?}
                 */
                function () { return _this.isMonacoLoaded$.next(true); }));
            }));
        });
        /** @type {?} */
        var loaderScript = null;
        // Load AMD loader if necessary
        if (!((/** @type {?} */ (window))).require && !((/** @type {?} */ (window))).amdRequire) {
            loaderScript = document.createElement('script');
            loaderScript.type = 'text/javascript';
            loaderScript.src = this._monacoPath + "/loader.js";
            loaderScript.addEventListener('load', onGotAmdLoader);
            document.body.appendChild(loaderScript);
        }
        else if (!((/** @type {?} */ (window))).amdRequire) {
            this.addElectronFixScripts();
            this.nodeRequire = ((/** @type {?} */ (window))).require;
            loaderScript = document.createElement('script');
            loaderScript.type = 'text/javascript';
            loaderScript.src = this._monacoPath + "/loader.js";
            loaderScript.addEventListener('load', onGotAmdLoader);
            document.body.appendChild(loaderScript);
        }
        else {
            onGotAmdLoader();
        }
    };
    /**
     * @return {?}
     */
    MonacoEditorLoaderService.prototype.addElectronFixScripts = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var electronFixScript = document.createElement('script');
        // workaround monaco-css not understanding the environment
        /** @type {?} */
        var inlineScript = document.createTextNode('self.module = undefined;');
        // workaround monaco-typescript not understanding the environment
        /** @type {?} */
        var inlineScript2 = document.createTextNode('self.process.browser = true;');
        electronFixScript.appendChild(inlineScript);
        electronFixScript.appendChild(inlineScript2);
        document.body.appendChild(electronFixScript);
    };
    MonacoEditorLoaderService.decorators = [
        { type: Injectable, args: [{ providedIn: 'root' },] }
    ];
    /** @nocollapse */
    MonacoEditorLoaderService.ctorParameters = function () { return [
        { type: NgZone },
        { type: String, decorators: [{ type: Optional }, { type: Inject, args: [MONACO_PATH,] }] }
    ]; };
    /** @nocollapse */ MonacoEditorLoaderService.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function MonacoEditorLoaderService_Factory() { return new MonacoEditorLoaderService(i0.ɵɵinject(i0.NgZone), i0.ɵɵinject("MONACO_PATH", 8)); }, token: MonacoEditorLoaderService, providedIn: "root" });
    return MonacoEditorLoaderService;
}());
export { MonacoEditorLoaderService };
if (false) {
    /** @type {?} */
    MonacoEditorLoaderService.prototype.nodeRequire;
    /** @type {?} */
    MonacoEditorLoaderService.prototype.isMonacoLoaded$;
    /**
     * @type {?}
     * @private
     */
    MonacoEditorLoaderService.prototype._monacoPath;
    /**
     * @type {?}
     * @private
     */
    MonacoEditorLoaderService.prototype.ngZone;
    /** @type {?} */
    MonacoEditorLoaderService.prototype.monacoPathConfig;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9uYWNvLWVkaXRvci1sb2FkZXIuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BtYXRlcmlhLXVpL25neC1tb25hY28tZWRpdG9yLyIsInNvdXJjZXMiOlsibGliL3NlcnZpY2VzL21vbmFjby1lZGl0b3ItbG9hZGVyLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sRUFBRSxRQUFRLEVBQUUsTUFBTSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3JFLE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDdkMsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLGVBQWUsQ0FBQzs7QUFFNUM7SUFXSSxtQ0FBb0IsTUFBYyxFQUEwQyxnQkFBd0I7UUFBcEcsaUJBWUM7UUFabUIsV0FBTSxHQUFOLE1BQU0sQ0FBUTtRQUEwQyxxQkFBZ0IsR0FBaEIsZ0JBQWdCLENBQVE7UUFScEcsb0JBQWUsR0FBNkIsSUFBSSxlQUFlLENBQVUsS0FBSyxDQUFDLENBQUM7UUFDeEUsZ0JBQVcsR0FBRyw2QkFBNkIsQ0FBQztRQVFsRCxJQUFJLENBQUMsbUJBQUssTUFBTSxFQUFBLENBQUMsQ0FBQyw4QkFBOEIsRUFBRTtZQUNoRCxNQUFNLENBQUMsR0FBRzs7O1lBQUMsY0FBTSxPQUFBLEtBQUksQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxFQUEvQixDQUErQixFQUFDLENBQUM7WUFDbEQsT0FBTztTQUNSO1FBRUQsQ0FBQyxtQkFBSyxNQUFNLEVBQUEsQ0FBQyxDQUFDLDhCQUE4QixHQUFHLElBQUksQ0FBQztRQUVwRCxJQUFJLElBQUksQ0FBQyxnQkFBZ0IsRUFBRTtZQUN6QixJQUFJLENBQUMsVUFBVSxHQUFHLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQztTQUN6QztRQUNELElBQUksQ0FBQyxVQUFVLEVBQUUsQ0FBQztJQUNwQixDQUFDO0lBbEJELHNCQUFJLGlEQUFV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QUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO0lBQ2pELENBQUM7O2dCQXpFSixVQUFVLFNBQUMsRUFBRSxVQUFVLEVBQUUsTUFBTSxFQUFFOzs7O2dCQUpiLE1BQU07NkNBZWMsUUFBUSxZQUFJLE1BQU0sU0FBQyxXQUFXOzs7b0NBZnZFO0NBOEVDLEFBMUVELElBMEVDO1NBekVZLHlCQUF5Qjs7O0lBQ2xDLGdEQUFpQjs7SUFDakIsb0RBQWdGOzs7OztJQUNoRixnREFBb0Q7Ozs7O0lBT3hDLDJDQUFzQjs7SUFBRSxxREFBZ0UiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlLCBOZ1pvbmUsIE9wdGlvbmFsLCBJbmplY3QgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEJlaGF2aW9yU3ViamVjdCB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgTU9OQUNPX1BBVEggfSBmcm9tICcuLi9pbnRlcmZhY2VzJztcblxuQEluamVjdGFibGUoeyBwcm92aWRlZEluOiAncm9vdCcgfSlcbmV4cG9ydCBjbGFzcyBNb25hY29FZGl0b3JMb2FkZXJTZXJ2aWNlIHtcbiAgICBub2RlUmVxdWlyZTogYW55O1xuICAgIGlzTW9uYWNvTG9hZGVkJDogQmVoYXZpb3JTdWJqZWN0PGJvb2xlYW4+ID0gbmV3IEJlaGF2aW9yU3ViamVjdDxib29sZWFuPihmYWxzZSk7XG4gICAgcHJpdmF0ZSBfbW9uYWNvUGF0aCA9ICdhc3NldHMvbW9uYWNvLWVkaXRvci9taW4vdnMnO1xuICAgIHNldCBtb25hY29QYXRoKHZhbHVlOiBzdHJpbmcpIHtcbiAgICAgICAgaWYgKHZhbHVlKSB7XG4gICAgICAgICAgICB0aGlzLl9tb25hY29QYXRoID0gdmFsdWU7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIG5nWm9uZTogTmdab25lLCBAT3B0aW9uYWwoKSBASW5qZWN0KE1PTkFDT19QQVRIKSBwdWJsaWMgbW9uYWNvUGF0aENvbmZpZzogc3RyaW5nKSB7XG4gICAgICBpZiAoKDxhbnk+d2luZG93KS5tb25hY29FZGl0b3JBbHJlYWR5SW5pdGlhbGl6ZWQpIHtcbiAgICAgICAgbmdab25lLnJ1bigoKSA9PiB0aGlzLmlzTW9uYWNvTG9hZGVkJC5uZXh0KHRydWUpKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICAoPGFueT53aW5kb3cpLm1vbmFjb0VkaXRvckFscmVhZHlJbml0aWFsaXplZCA9IHRydWU7XG5cbiAgICAgIGlmICh0aGlzLm1vbmFjb1BhdGhDb25maWcpIHtcbiAgICAgICAgdGhpcy5tb25hY29QYXRoID0gdGhpcy5tb25hY29QYXRoQ29uZmlnO1xuICAgICAgfVxuICAgICAgdGhpcy5sb2FkTW9uYWNvKCk7XG4gICAgfVxuXG4gICAgbG9hZE1vbmFjbygpIHtcbiAgICAgIGNvbnN0IG9uR290QW1kTG9hZGVyID0gKCkgPT4ge1xuICAgICAgICAvLyBMb2FkIG1vbmFjb1xuICAgICAgICAoPGFueT53aW5kb3cpLmFtZFJlcXVpcmUgPSAgKDxhbnk+d2luZG93KS5yZXF1aXJlO1xuICAgICAgICBpZiAodGhpcy5ub2RlUmVxdWlyZSkge1xuICAgICAgICAgICAgKDxhbnk+d2luZG93KS5yZXF1aXJlID0gdGhpcy5ub2RlUmVxdWlyZTtcbiAgICAgICAgfVxuICAgICAgICAoPGFueT53aW5kb3cpLmFtZFJlcXVpcmUuY29uZmlnKHsgcGF0aHM6IHsgJ3ZzJzogdGhpcy5fbW9uYWNvUGF0aCB9IH0pO1xuICAgICAgICAoPGFueT53aW5kb3cpLmFtZFJlcXVpcmUoWyd2cy9lZGl0b3IvZWRpdG9yLm1haW4nXSwgKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5uZ1pvbmUucnVuKCgpID0+IHRoaXMuaXNNb25hY29Mb2FkZWQkLm5leHQodHJ1ZSkpO1xuICAgICAgICB9KTtcbiAgICB9O1xuXG4gICAgbGV0IGxvYWRlclNjcmlwdDogYW55ID0gbnVsbDtcbiAgICAvLyBMb2FkIEFNRCBsb2FkZXIgaWYgbmVjZXNzYXJ5XG4gICAgaWYgKCEoPGFueT53aW5kb3cpLnJlcXVpcmUgJiYgISg8YW55PndpbmRvdykuYW1kUmVxdWlyZSkge1xuXG4gICAgICAgIGxvYWRlclNjcmlwdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NjcmlwdCcpO1xuICAgICAgICBsb2FkZXJTY3JpcHQudHlwZSA9ICd0ZXh0L2phdmFzY3JpcHQnO1xuICAgICAgICBsb2FkZXJTY3JpcHQuc3JjID0gYCR7dGhpcy5fbW9uYWNvUGF0aH0vbG9hZGVyLmpzYDtcbiAgICAgICAgbG9hZGVyU2NyaXB0LmFkZEV2ZW50TGlzdGVuZXIoJ2xvYWQnLCBvbkdvdEFtZExvYWRlcik7XG4gICAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQobG9hZGVyU2NyaXB0KTtcblxuICAgIH0gZWxzZSBpZiAoISg8YW55PndpbmRvdykuYW1kUmVxdWlyZSkge1xuXG4gICAgICAgIHRoaXMuYWRkRWxlY3Ryb25GaXhTY3JpcHRzKCk7XG5cbiAgICAgICAgdGhpcy5ub2RlUmVxdWlyZSA9ICAoPGFueT53aW5kb3cpLnJlcXVpcmU7XG4gICAgICAgIGxvYWRlclNjcmlwdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NjcmlwdCcpO1xuICAgICAgICBsb2FkZXJTY3JpcHQudHlwZSA9ICd0ZXh0L2phdmFzY3JpcHQnO1xuICAgICAgICBsb2FkZXJTY3JpcHQuc3JjID0gYCR7dGhpcy5fbW9uYWNvUGF0aH0vbG9hZGVyLmpzYDtcbiAgICAgICAgbG9hZGVyU2NyaXB0LmFkZEV2ZW50TGlzdGVuZXIoJ2xvYWQnLCBvbkdvdEFtZExvYWRlcik7XG4gICAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQobG9hZGVyU2NyaXB0KTtcblxuICAgIH0gZWxzZSB7XG4gICAgICAgIG9uR290QW1kTG9hZGVyKCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgYWRkRWxlY3Ryb25GaXhTY3JpcHRzKCkge1xuICAgICAgICBjb25zdCBlbGVjdHJvbkZpeFNjcmlwdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NjcmlwdCcpO1xuICAgICAgICAvLyB3b3JrYXJvdW5kIG1vbmFjby1jc3Mgbm90IHVuZGVyc3RhbmRpbmcgdGhlIGVudmlyb25tZW50XG4gICAgICAgIGNvbnN0IGlubGluZVNjcmlwdCA9IGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKCdzZWxmLm1vZHVsZSA9IHVuZGVmaW5lZDsnKTtcbiAgICAgICAgLy8gd29ya2Fyb3VuZCBtb25hY28tdHlwZXNjcmlwdCBub3QgdW5kZXJzdGFuZGluZyB0aGUgZW52aXJvbm1lbnRcbiAgICAgICAgY29uc3QgaW5saW5lU2NyaXB0MiA9IGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKCdzZWxmLnByb2Nlc3MuYnJvd3NlciA9IHRydWU7Jyk7XG4gICAgICAgIGVsZWN0cm9uRml4U2NyaXB0LmFwcGVuZENoaWxkKGlubGluZVNjcmlwdCk7XG4gICAgICAgIGVsZWN0cm9uRml4U2NyaXB0LmFwcGVuZENoaWxkKGlubGluZVNjcmlwdDIpO1xuICAgICAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGVsZWN0cm9uRml4U2NyaXB0KTtcbiAgICB9XG59XG4iXX0=
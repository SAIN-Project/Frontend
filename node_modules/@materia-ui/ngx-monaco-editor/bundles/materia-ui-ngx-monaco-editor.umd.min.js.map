{"version":3,"sources":["ng://@materia-ui/ngx-monaco-editor/lib/directives/resized-event.directive.ts","ng://@materia-ui/ngx-monaco-editor/lib/interfaces/index.ts","ng://@materia-ui/ngx-monaco-editor/lib/services/monaco-editor-loader.service.ts","ng://@materia-ui/ngx-monaco-editor/lib/directives/monaco-editor-loader.directive.ts","ng://@materia-ui/ngx-monaco-editor/lib/components/monaco-editor/monaco-editor.component.ts","ng://@materia-ui/ngx-monaco-editor/lib/components/monaco-diff-editor/monaco-diff-editor.component.ts","ng://@materia-ui/ngx-monaco-editor/lib/monaco-editor.module.ts"],"names":["ResizedEvent","element","newWidth","newHeight","oldWidth","oldHeight","this","ResizedDirective","resized","EventEmitter","prototype","ngOnInit","_this","resizeEvent","ResizeSensor","nativeElement","x","onResized","clientWidth","clientHeight","event","next","Directive","args","selector","exportAs","ElementRef","Output","MonacoEditorLoaderService","ngZone","monacoPathConfig","isMonacoLoaded$","BehaviorSubject","_monacoPath","monacoEditorAlreadyInitialized","run","monacoPath","loadMonaco","Object","defineProperty","value","onGotAmdLoader","amdRequire","require","nodeRequire","config","paths","vs","loaderScript","addElectronFixScripts","document","createElement","type","src","addEventListener","body","appendChild","electronFixScript","inlineScript","createTextNode","inlineScript2","Injectable","providedIn","NgZone","Optional","Inject","MonacoEditorLoaderDirective","templateRef","viewContainer","monacoEditorLoaderService","asObservable","destroyed$","Subject","pipe","takeUntil","subscribe","loaded","clear","createEmbeddedView","ngOnDestroy","complete","TemplateRef","ViewContainerRef","MonacoEditorComponent","monacoLoader","init","propagateChange","_","container","editorContent","filter","isLoaded","take","initMonaco","ngOnChanges","changes","editor","options","firstChange","previousValue","language","currentValue","monaco","setModelLanguage","getModel","theme","setTheme","updateOptions","writeValue","setValue","registerOnChange","fn","registerOnTouched","onTouched","validate","parseError","valid","registerOnValidatorChange","onErrorStatusChange","opts","join","automaticLayout","scrollBeyondLastLine","assign","create","layout","onDidChangeModelContent","getValue","onDidChangeModelDecorations","pastParseError","getModelMarkers","map","m","message","onDidBlurEditorText","emit","width","height","dispose","Component","template","changeDetection","ChangeDetectionStrategy","OnPush","providers","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","multi","NG_VALIDATORS","Input","ViewChild","static","MonacoDiffEditorComponent","code","modified","createModel","original","setModel","readOnly","createDiffEditor","MonacoEditorModule","NgModule","imports","declarations","exports","entryComponents"],"mappings":"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","sourcesContent":["import { Directive, ElementRef, EventEmitter, Output, OnInit } from '@angular/core';\nimport { ResizeSensor } from 'css-element-queries';\n\nexport class ResizedEvent {\n    constructor(\n        readonly element: ElementRef,\n        readonly newWidth: number,\n        readonly newHeight: number,\n        readonly oldWidth: number,\n        readonly oldHeight: number\n    ) { }\n}\n\n@Directive({\n    selector: '[materiaResized]',\n    exportAs: 'materiaResized'\n})\nexport class ResizedDirective implements OnInit {\n\n    @Output() resized = new EventEmitter<ResizedEvent>();\n\n    private oldWidth: number;\n    private oldHeight: number;\n    private resizeEvent: ResizeSensor;\n\n    constructor(private readonly element: ElementRef) {\n    }\n\n    ngOnInit(): void {\n        this.resizeEvent = new ResizeSensor(this.element.nativeElement, x => this.onResized());\n        this.onResized();\n    }\n\n    private onResized(): void {\n        const newWidth = this.element.nativeElement.clientWidth;\n        const newHeight = this.element.nativeElement.clientHeight;\n\n        if (newWidth === this.oldWidth && newHeight === this.oldHeight) {\n            return;\n        }\n\n        const event = new ResizedEvent(\n            this.element,\n            newWidth,\n            newHeight,\n            this.oldWidth,\n            this.oldHeight);\n\n        this.oldWidth = this.element.nativeElement.clientWidth;\n        this.oldHeight = this.element.nativeElement.clientHeight;\n\n        this.resized.next(event);\n    }\n\n}\n","/// <reference path=\"monaco.d.ts\" />\ndeclare const monaco: any;\nexport const MONACO_PATH = 'MONACO_PATH';\nexport type MonacoEditorConstructionOptions = monaco.editor.IEditorConstructionOptions;\nexport type MonacoDiffEditorConstructionOptions = monaco.editor.IDiffEditorConstructionOptions;\nexport type MonacoStandaloneCodeEditor = monaco.editor.IStandaloneCodeEditor;\nexport type MonacoStandaloneDiffEditor = monaco.editor.IStandaloneDiffEditor;\n","import { Injectable, NgZone, Optional, Inject } from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\nimport { MONACO_PATH } from '../interfaces';\n\n@Injectable({ providedIn: 'root' })\nexport class MonacoEditorLoaderService {\n    nodeRequire: any;\n    isMonacoLoaded$: BehaviorSubject<boolean> = new BehaviorSubject<boolean>(false);\n    private _monacoPath = 'assets/monaco-editor/min/vs';\n    set monacoPath(value: string) {\n        if (value) {\n            this._monacoPath = value;\n        }\n    }\n\n    constructor(private ngZone: NgZone, @Optional() @Inject(MONACO_PATH) public monacoPathConfig: string) {\n      if ((<any>window).monacoEditorAlreadyInitialized) {\n        ngZone.run(() => this.isMonacoLoaded$.next(true));\n        return;\n      }\n\n      (<any>window).monacoEditorAlreadyInitialized = true;\n\n      if (this.monacoPathConfig) {\n        this.monacoPath = this.monacoPathConfig;\n      }\n      this.loadMonaco();\n    }\n\n    loadMonaco() {\n      const onGotAmdLoader = () => {\n        // Load monaco\n        (<any>window).amdRequire =  (<any>window).require;\n        if (this.nodeRequire) {\n            (<any>window).require = this.nodeRequire;\n        }\n        (<any>window).amdRequire.config({ paths: { 'vs': this._monacoPath } });\n        (<any>window).amdRequire(['vs/editor/editor.main'], () => {\n            this.ngZone.run(() => this.isMonacoLoaded$.next(true));\n        });\n    };\n\n    let loaderScript: any = null;\n    // Load AMD loader if necessary\n    if (!(<any>window).require && !(<any>window).amdRequire) {\n\n        loaderScript = document.createElement('script');\n        loaderScript.type = 'text/javascript';\n        loaderScript.src = `${this._monacoPath}/loader.js`;\n        loaderScript.addEventListener('load', onGotAmdLoader);\n        document.body.appendChild(loaderScript);\n\n    } else if (!(<any>window).amdRequire) {\n\n        this.addElectronFixScripts();\n\n        this.nodeRequire =  (<any>window).require;\n        loaderScript = document.createElement('script');\n        loaderScript.type = 'text/javascript';\n        loaderScript.src = `${this._monacoPath}/loader.js`;\n        loaderScript.addEventListener('load', onGotAmdLoader);\n        document.body.appendChild(loaderScript);\n\n    } else {\n        onGotAmdLoader();\n      }\n    }\n\n    addElectronFixScripts() {\n        const electronFixScript = document.createElement('script');\n        // workaround monaco-css not understanding the environment\n        const inlineScript = document.createTextNode('self.module = undefined;');\n        // workaround monaco-typescript not understanding the environment\n        const inlineScript2 = document.createTextNode('self.process.browser = true;');\n        electronFixScript.appendChild(inlineScript);\n        electronFixScript.appendChild(inlineScript2);\n        document.body.appendChild(electronFixScript);\n    }\n}\n","import { Directive, TemplateRef, ViewContainerRef, OnDestroy, OnInit } from '@angular/core';\nimport { MonacoEditorLoaderService } from '../services/monaco-editor-loader.service';\nimport { takeUntil } from 'rxjs/operators';\nimport { Subject } from 'rxjs';\n\n@Directive({ selector: '[ngxLoadMonacoEditor]' })\nexport class MonacoEditorLoaderDirective implements OnInit, OnDestroy {\n  isMonacoLoaded$ = this.monacoEditorLoaderService.isMonacoLoaded$.asObservable();\n  destroyed$ = new Subject<void>();\n\n  constructor(\n    private templateRef: TemplateRef<any>,\n    private viewContainer: ViewContainerRef,\n    private monacoEditorLoaderService: MonacoEditorLoaderService\n  ) {}\n\n  ngOnInit() {\n    this.isMonacoLoaded$.pipe(takeUntil(this.destroyed$)).subscribe((loaded) => {\n      if (! loaded) {\n        return this.viewContainer.clear();\n      }\n      this.viewContainer.createEmbeddedView(this.templateRef);\n    });\n  }\n\n  ngOnDestroy() {\n    this.destroyed$.next();\n    this.destroyed$.complete();\n  }\n}\n","import {\n    Component,\n    ViewChild,\n    ElementRef,\n    EventEmitter,\n    OnInit,\n    OnChanges,\n    OnDestroy,\n    Input,\n    ChangeDetectionStrategy,\n    forwardRef,\n    SimpleChanges,\n    Output\n} from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR, Validator, NG_VALIDATORS, ValidationErrors } from '@angular/forms';\nimport { filter, take } from 'rxjs/operators';\n\nimport { MonacoEditorLoaderService } from '../../services/monaco-editor-loader.service';\nimport { MonacoEditorConstructionOptions, MonacoStandaloneCodeEditor } from '../../interfaces';\n\n@Component({\n    selector: 'ngx-monaco-editor',\n    template: `<div #container materiaResized (resized)=\"onResized($event)\" class=\"editor-container\" fxFlex>\n\t<div class=\"wrapper\">\n\t\t<div\n\t\t\t#editor\n\t\t\tclass=\"monaco-editor\"\n\t\t\t[style.width.px]=\"container.offsetWidth\"\n\t\t\t[style.height.px]=\"container.offsetHeight\" style=\"min-width: 0;\"\n\t\t></div>\n\t</div>\n</div>`,\n    styles: [\n        `:host {\n\tflex: 1;\n\tbox-sizing: border-box;\n\tflex-direction: column;\n\tdisplay: flex;\n\toverflow: hidden;\n\tmax-width: 100%;\n\tmin-wdith: 0;\n}\n.wrapper {\n\twidth: 0px; height: 0px;\n}\n.editor-container {\n\ttext-overflow: ellipsis;\n\toverflow: hidden;\n\tposition: relative;\n\tmin-width: 0;\n\tdisplay: table;\n\twidth: 100%;\n\theight: 100%;\n}`\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush,\n    providers: [\n        {\n            provide: NG_VALUE_ACCESSOR,\n            useExisting: forwardRef(() => MonacoEditorComponent),\n            multi: true\n        },\n        {\n            provide: NG_VALIDATORS,\n            useExisting: forwardRef(() => MonacoEditorComponent),\n            multi: true,\n        }\n    ]\n})\nexport class MonacoEditorComponent implements OnInit, OnChanges, OnDestroy, ControlValueAccessor, Validator {\n    @Input() options: MonacoEditorConstructionOptions;\n    @Output() init: EventEmitter<MonacoStandaloneCodeEditor> = new EventEmitter();\n    @ViewChild('editor', {static: true}) editorContent: ElementRef;\n\n    container: HTMLDivElement;\n    editor: MonacoStandaloneCodeEditor;\n    value: string;\n    parseError: boolean;\n\n    private onTouched: () => void;\n    private onErrorStatusChange: () => void;\n    private propagateChange: (_: any) => any = (_: any) => { };\n\n    constructor(private monacoLoader: MonacoEditorLoaderService) { }\n\n    ngOnInit() {\n        this.container = this.editorContent.nativeElement;\n        this.monacoLoader.isMonacoLoaded$.pipe(\n            filter(isLoaded => isLoaded),\n            take(1)\n        ).subscribe(() => {\n            this.initMonaco();\n        });\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        if (this.editor && changes.options && !changes.options.firstChange) {\n            if (changes.options.previousValue.language !== changes.options.currentValue.language) {\n                monaco.editor.setModelLanguage(\n                    this.editor.getModel(),\n                    this.options && this.options.language ? this.options.language : 'text'\n                );\n            }\n            if (changes.options.previousValue.theme !== changes.options.currentValue.theme) {\n                monaco.editor.setTheme(changes.options.currentValue.theme);\n            }\n            this.editor.updateOptions(changes.options.currentValue);\n        }\n    }\n\n    writeValue(value: string): void {\n        this.value = value;\n        if (this.editor && value) {\n            this.editor.setValue(value);\n        } else if (this.editor) {\n            this.editor.setValue('');\n        }\n    }\n\n    registerOnChange(fn: any): void {\n        this.propagateChange = fn;\n    }\n\n    registerOnTouched(fn: any): void {\n        this.onTouched = fn;\n    }\n\n    validate(): ValidationErrors {\n        return (!this.parseError) ? null : {\n            parseError: {\n                valid: false,\n            }\n        };\n    }\n\n    registerOnValidatorChange?(fn: () => void): void {\n        this.onErrorStatusChange = fn;\n    }\n\n    private initMonaco() {\n        let opts: MonacoEditorConstructionOptions = {\n            value: [this.value].join('\\n'),\n            language: 'text',\n            automaticLayout: true,\n            scrollBeyondLastLine: false,\n            theme: 'vc'\n        };\n        if (this.options) {\n            opts = Object.assign({}, opts, this.options);\n        }\n        this.editor = monaco.editor.create(this.container, opts);\n        this.editor.layout();\n\n        this.editor.onDidChangeModelContent(() => {\n            this.propagateChange(this.editor.getValue());\n        });\n\n        this.editor.onDidChangeModelDecorations(() => {\n            const pastParseError = this.parseError;\n            if (monaco.editor.getModelMarkers({}).map(m => m.message).join(', ')) {\n                this.parseError = true;\n            } else {\n                this.parseError = false;\n            }\n\n            if (pastParseError !== this.parseError) {\n                this.onErrorStatusChange();\n            }\n        });\n\n        this.editor.onDidBlurEditorText(() => {\n            this.onTouched();\n        });\n\n        this.init.emit(this.editor);\n    }\n\n    onResized(event) {\n        if (this.editor) {\n            this.editor.layout({\n                width: event.newWidth,\n                height: event.newHeight\n            });\n        }\n    }\n\n    ngOnDestroy() {\n        if (this.editor) {\n            this.editor.dispose();\n        }\n    }\n}\n","import {\n    Component,\n    ViewChild,\n    ElementRef,\n    EventEmitter,\n    OnInit,\n    OnChanges,\n    OnDestroy,\n    Output,\n    Input,\n    ChangeDetectionStrategy,\n    SimpleChanges\n} from '@angular/core';\nimport { filter, take } from 'rxjs/operators';\n\nimport { MonacoEditorLoaderService } from '../../services/monaco-editor-loader.service';\nimport { MonacoDiffEditorConstructionOptions, MonacoStandaloneDiffEditor } from '../../interfaces';\n\n@Component({\n    selector: 'ngx-monaco-diff-editor',\n    template: `<div #container materiaResized (resized)=\"onResized($event)\" class=\"editor-container\" fxFlex>\n<div class=\"wrapper\">\n  <div\n    #diffEditor\n    class=\"monaco-editor\"\n    [style.width.px]=\"container.offsetWidth\"\n    [style.height.px]=\"container.offsetHeight\" style=\"min-width: 0;\"\n  ></div>\n</div>\n</div>`,\n    styles: [\n        `:host {\nflex: 1;\nbox-sizing: border-box;\nflex-direction: column;\ndisplay: flex;\noverflow: hidden;\nmax-width: 100%;\nmin-wdith: 0;\n}\n.wrapper {\nwidth: 0px; height: 0px;\n}\n.editor-container {\ntext-overflow: ellipsis;\noverflow: hidden;\nposition: relative;\nmin-width: 0;\ndisplay: table;\nwidth: 100%;\nheight: 100%;\n}`\n    ],\n    changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MonacoDiffEditorComponent implements OnInit, OnChanges, OnDestroy {\n    container: HTMLDivElement;\n    editor: MonacoStandaloneDiffEditor;\n\n    @Input() original: string;\n    @Input() modified: string;\n    @Input() options: MonacoDiffEditorConstructionOptions;\n    @Output() init: EventEmitter< MonacoStandaloneDiffEditor> = new EventEmitter();\n\n    @ViewChild('diffEditor', {static: true}) editorContent: ElementRef;\n\n    constructor(private monacoLoader: MonacoEditorLoaderService) { }\n\n    ngOnInit() {\n        this.container = this.editorContent.nativeElement;\n        this.monacoLoader.isMonacoLoaded$.pipe(\n            filter(isLoaded => isLoaded),\n            take(1),\n        ).subscribe(() => {\n            this.initMonaco();\n        });\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        if (this.editor && ((changes.code && !changes.code.firstChange) || (changes.modified && !changes.modified.firstChange))) {\n            const modified = monaco.editor.createModel(this.modified);\n            const original = monaco.editor.createModel(this.original);\n            this.editor.setModel({\n                original,\n                modified\n            });\n        }\n        if (\n            this.editor &&\n            changes.options &&\n            !changes.options.firstChange\n        ) {\n            if (changes.options.previousValue.theme !== changes.options.currentValue.theme) {\n                monaco.editor.setTheme(changes.options.currentValue.theme);\n            }\n\n            this.editor.updateOptions(changes.options.currentValue);\n        }\n    }\n\n    private initMonaco() {\n        let opts: MonacoDiffEditorConstructionOptions = {\n            readOnly: true,\n            theme: 'vc'\n        };\n        if (this.options) {\n            opts = Object.assign({}, opts, this.options);\n        }\n        this.editor = monaco.editor.createDiffEditor(this.container, opts);\n\n        const original = monaco.editor.createModel(this.original);\n        const modified = monaco.editor.createModel(this.modified);\n\n        this.editor.setModel({\n            original,\n            modified\n        });\n        this.editor.layout();\n        this.init.emit(this.editor);\n    }\n\n    onResized(event) {\n        if (this.editor) {\n            this.editor.layout({\n                width: event.newWidth,\n                height: event.newHeight\n            });\n        }\n    }\n\n    ngOnDestroy() {\n        if (this.editor) {\n            this.editor.dispose();\n        }\n    }\n}\n","import { NgModule } from '@angular/core';\nimport { MonacoEditorLoaderDirective } from './directives/monaco-editor-loader.directive';\nimport { MonacoEditorComponent } from './components/monaco-editor/monaco-editor.component';\nimport { ResizedDirective } from './directives/resized-event.directive';\nimport { MonacoDiffEditorComponent } from './components/monaco-diff-editor/monaco-diff-editor.component';\n\n@NgModule({\n  imports: [],\n  declarations: [\n    MonacoEditorLoaderDirective,\n    MonacoEditorComponent,\n    ResizedDirective,\n    MonacoDiffEditorComponent\n  ],\n  exports: [\n    MonacoEditorLoaderDirective,\n    MonacoEditorComponent,\n    MonacoDiffEditorComponent,\n    ResizedDirective\n  ],\n  entryComponents: [MonacoEditorComponent, MonacoDiffEditorComponent]\n})\nexport class MonacoEditorModule { }\n"]}
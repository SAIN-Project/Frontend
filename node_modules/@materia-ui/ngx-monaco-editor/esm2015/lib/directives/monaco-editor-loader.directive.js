/**
 * @fileoverview added by tsickle
 * Generated from: lib/directives/monaco-editor-loader.directive.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, TemplateRef, ViewContainerRef } from '@angular/core';
import { MonacoEditorLoaderService } from '../services/monaco-editor-loader.service';
import { takeUntil } from 'rxjs/operators';
import { Subject } from 'rxjs';
export class MonacoEditorLoaderDirective {
    /**
     * @param {?} templateRef
     * @param {?} viewContainer
     * @param {?} monacoEditorLoaderService
     */
    constructor(templateRef, viewContainer, monacoEditorLoaderService) {
        this.templateRef = templateRef;
        this.viewContainer = viewContainer;
        this.monacoEditorLoaderService = monacoEditorLoaderService;
        this.isMonacoLoaded$ = this.monacoEditorLoaderService.isMonacoLoaded$.asObservable();
        this.destroyed$ = new Subject();
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.isMonacoLoaded$.pipe(takeUntil(this.destroyed$)).subscribe((/**
         * @param {?} loaded
         * @return {?}
         */
        (loaded) => {
            if (!loaded) {
                return this.viewContainer.clear();
            }
            this.viewContainer.createEmbeddedView(this.templateRef);
        }));
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.destroyed$.next();
        this.destroyed$.complete();
    }
}
MonacoEditorLoaderDirective.decorators = [
    { type: Directive, args: [{ selector: '[ngxLoadMonacoEditor]' },] }
];
/** @nocollapse */
MonacoEditorLoaderDirective.ctorParameters = () => [
    { type: TemplateRef },
    { type: ViewContainerRef },
    { type: MonacoEditorLoaderService }
];
if (false) {
    /** @type {?} */
    MonacoEditorLoaderDirective.prototype.isMonacoLoaded$;
    /** @type {?} */
    MonacoEditorLoaderDirective.prototype.destroyed$;
    /**
     * @type {?}
     * @private
     */
    MonacoEditorLoaderDirective.prototype.templateRef;
    /**
     * @type {?}
     * @private
     */
    MonacoEditorLoaderDirective.prototype.viewContainer;
    /**
     * @type {?}
     * @private
     */
    MonacoEditorLoaderDirective.prototype.monacoEditorLoaderService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9uYWNvLWVkaXRvci1sb2FkZXIuZGlyZWN0aXZlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQG1hdGVyaWEtdWkvbmd4LW1vbmFjby1lZGl0b3IvIiwic291cmNlcyI6WyJsaWIvZGlyZWN0aXZlcy9tb25hY28tZWRpdG9yLWxvYWRlci5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLFdBQVcsRUFBRSxnQkFBZ0IsRUFBcUIsTUFBTSxlQUFlLENBQUM7QUFDNUYsT0FBTyxFQUFFLHlCQUF5QixFQUFFLE1BQU0sMENBQTBDLENBQUM7QUFDckYsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQzNDLE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFHL0IsTUFBTSxPQUFPLDJCQUEyQjs7Ozs7O0lBSXRDLFlBQ1UsV0FBNkIsRUFDN0IsYUFBK0IsRUFDL0IseUJBQW9EO1FBRnBELGdCQUFXLEdBQVgsV0FBVyxDQUFrQjtRQUM3QixrQkFBYSxHQUFiLGFBQWEsQ0FBa0I7UUFDL0IsOEJBQXlCLEdBQXpCLHlCQUF5QixDQUEyQjtRQU45RCxvQkFBZSxHQUFHLElBQUksQ0FBQyx5QkFBeUIsQ0FBQyxlQUFlLENBQUMsWUFBWSxFQUFFLENBQUM7UUFDaEYsZUFBVSxHQUFHLElBQUksT0FBTyxFQUFRLENBQUM7SUFNOUIsQ0FBQzs7OztJQUVKLFFBQVE7UUFDTixJQUFJLENBQUMsZUFBZSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsU0FBUzs7OztRQUFDLENBQUMsTUFBTSxFQUFFLEVBQUU7WUFDekUsSUFBSSxDQUFFLE1BQU0sRUFBRTtnQkFDWixPQUFPLElBQUksQ0FBQyxhQUFhLENBQUMsS0FBSyxFQUFFLENBQUM7YUFDbkM7WUFDRCxJQUFJLENBQUMsYUFBYSxDQUFDLGtCQUFrQixDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQztRQUMxRCxDQUFDLEVBQUMsQ0FBQztJQUNMLENBQUM7Ozs7SUFFRCxXQUFXO1FBQ1QsSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLEVBQUUsQ0FBQztRQUN2QixJQUFJLENBQUMsVUFBVSxDQUFDLFFBQVEsRUFBRSxDQUFDO0lBQzdCLENBQUM7OztZQXZCRixTQUFTLFNBQUMsRUFBRSxRQUFRLEVBQUUsdUJBQXVCLEVBQUU7Ozs7WUFMNUIsV0FBVztZQUFFLGdCQUFnQjtZQUN4Qyx5QkFBeUI7Ozs7SUFNaEMsc0RBQWdGOztJQUNoRixpREFBaUM7Ozs7O0lBRy9CLGtEQUFxQzs7Ozs7SUFDckMsb0RBQXVDOzs7OztJQUN2QyxnRUFBNEQiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEaXJlY3RpdmUsIFRlbXBsYXRlUmVmLCBWaWV3Q29udGFpbmVyUmVmLCBPbkRlc3Ryb3ksIE9uSW5pdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgTW9uYWNvRWRpdG9yTG9hZGVyU2VydmljZSB9IGZyb20gJy4uL3NlcnZpY2VzL21vbmFjby1lZGl0b3ItbG9hZGVyLnNlcnZpY2UnO1xuaW1wb3J0IHsgdGFrZVVudGlsIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuaW1wb3J0IHsgU3ViamVjdCB9IGZyb20gJ3J4anMnO1xuXG5ARGlyZWN0aXZlKHsgc2VsZWN0b3I6ICdbbmd4TG9hZE1vbmFjb0VkaXRvcl0nIH0pXG5leHBvcnQgY2xhc3MgTW9uYWNvRWRpdG9yTG9hZGVyRGlyZWN0aXZlIGltcGxlbWVudHMgT25Jbml0LCBPbkRlc3Ryb3kge1xuICBpc01vbmFjb0xvYWRlZCQgPSB0aGlzLm1vbmFjb0VkaXRvckxvYWRlclNlcnZpY2UuaXNNb25hY29Mb2FkZWQkLmFzT2JzZXJ2YWJsZSgpO1xuICBkZXN0cm95ZWQkID0gbmV3IFN1YmplY3Q8dm9pZD4oKTtcblxuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIHRlbXBsYXRlUmVmOiBUZW1wbGF0ZVJlZjxhbnk+LFxuICAgIHByaXZhdGUgdmlld0NvbnRhaW5lcjogVmlld0NvbnRhaW5lclJlZixcbiAgICBwcml2YXRlIG1vbmFjb0VkaXRvckxvYWRlclNlcnZpY2U6IE1vbmFjb0VkaXRvckxvYWRlclNlcnZpY2VcbiAgKSB7fVxuXG4gIG5nT25Jbml0KCkge1xuICAgIHRoaXMuaXNNb25hY29Mb2FkZWQkLnBpcGUodGFrZVVudGlsKHRoaXMuZGVzdHJveWVkJCkpLnN1YnNjcmliZSgobG9hZGVkKSA9PiB7XG4gICAgICBpZiAoISBsb2FkZWQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudmlld0NvbnRhaW5lci5jbGVhcigpO1xuICAgICAgfVxuICAgICAgdGhpcy52aWV3Q29udGFpbmVyLmNyZWF0ZUVtYmVkZGVkVmlldyh0aGlzLnRlbXBsYXRlUmVmKTtcbiAgICB9KTtcbiAgfVxuXG4gIG5nT25EZXN0cm95KCkge1xuICAgIHRoaXMuZGVzdHJveWVkJC5uZXh0KCk7XG4gICAgdGhpcy5kZXN0cm95ZWQkLmNvbXBsZXRlKCk7XG4gIH1cbn1cbiJdfQ==
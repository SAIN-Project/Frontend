/**
 * @fileoverview added by tsickle
 * Generated from: lib/directives/resized-event.directive.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, ElementRef, EventEmitter, Output } from '@angular/core';
import { ResizeSensor } from 'css-element-queries';
import * as ɵngcc0 from '@angular/core';
export class ResizedEvent {
    /**
     * @param {?} element
     * @param {?} newWidth
     * @param {?} newHeight
     * @param {?} oldWidth
     * @param {?} oldHeight
     */
    constructor(element, newWidth, newHeight, oldWidth, oldHeight) {
        this.element = element;
        this.newWidth = newWidth;
        this.newHeight = newHeight;
        this.oldWidth = oldWidth;
        this.oldHeight = oldHeight;
    }
}
if (false) {
    /** @type {?} */
    ResizedEvent.prototype.element;
    /** @type {?} */
    ResizedEvent.prototype.newWidth;
    /** @type {?} */
    ResizedEvent.prototype.newHeight;
    /** @type {?} */
    ResizedEvent.prototype.oldWidth;
    /** @type {?} */
    ResizedEvent.prototype.oldHeight;
}
export class ResizedDirective {
    /**
     * @param {?} element
     */
    constructor(element) {
        this.element = element;
        this.resized = new EventEmitter();
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.resizeEvent = new ResizeSensor(this.element.nativeElement, (/**
         * @param {?} x
         * @return {?}
         */
        x => this.onResized()));
        this.onResized();
    }
    /**
     * @private
     * @return {?}
     */
    onResized() {
        /** @type {?} */
        const newWidth = this.element.nativeElement.clientWidth;
        /** @type {?} */
        const newHeight = this.element.nativeElement.clientHeight;
        if (newWidth === this.oldWidth && newHeight === this.oldHeight) {
            return;
        }
        /** @type {?} */
        const event = new ResizedEvent(this.element, newWidth, newHeight, this.oldWidth, this.oldHeight);
        this.oldWidth = this.element.nativeElement.clientWidth;
        this.oldHeight = this.element.nativeElement.clientHeight;
        this.resized.next(event);
    }
}
ResizedDirective.ɵfac = function ResizedDirective_Factory(t) { return new (t || ResizedDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };
ResizedDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: ResizedDirective, selectors: [["", "materiaResized", ""]], outputs: { resized: "resized" }, exportAs: ["materiaResized"] });
/** @nocollapse */
ResizedDirective.ctorParameters = () => [
    { type: ElementRef }
];
ResizedDirective.propDecorators = {
    resized: [{ type: Output }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ResizedDirective, [{
        type: Directive,
        args: [{
                selector: '[materiaResized]',
                exportAs: 'materiaResized'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }]; }, { resized: [{
            type: Output
        }] }); })();
if (false) {
    /** @type {?} */
    ResizedDirective.prototype.resized;
    /**
     * @type {?}
     * @private
     */
    ResizedDirective.prototype.oldWidth;
    /**
     * @type {?}
     * @private
     */
    ResizedDirective.prototype.oldHeight;
    /**
     * @type {?}
     * @private
     */
    ResizedDirective.prototype.resizeEvent;
    /**
     * @type {?}
     * @private
     */
    ResizedDirective.prototype.element;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVzaXplZC1ldmVudC5kaXJlY3RpdmUuanMiLCJzb3VyY2VzIjpbIkBtYXRlcmlhLXVpL25neC1tb25hY28tZWRpdG9yL2xpYi9kaXJlY3RpdmVzL3Jlc2l6ZWQtZXZlbnQuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxVQUFVLEVBQUUsWUFBWSxFQUFFLE1BQU0sRUFBVSxNQUFNLGVBQWUsQ0FBQztBQUNwRixPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0scUJBQXFCLENBQUM7O0FBRW5ELE1BQU0sT0FBTyxZQUFZO0FBQ3pCO0FBQVE7QUFDUztBQUNYO0FBQTRCO0FBQ1I7QUFDUjtBQUFRLElBSnRCLFlBQ2EsT0FBbUIsRUFDbkIsUUFBZ0IsRUFDaEIsU0FBaUIsRUFDakIsUUFBZ0IsRUFDaEIsU0FBaUI7QUFDL0IsUUFMYyxZQUFPLEdBQVAsT0FBTyxDQUFZO0FBQUMsUUFDcEIsYUFBUSxHQUFSLFFBQVEsQ0FBUTtBQUFDLFFBQ2pCLGNBQVMsR0FBVCxTQUFTLENBQVE7QUFBQyxRQUNsQixhQUFRLEdBQVIsUUFBUSxDQUFRO0FBQUMsUUFDakIsY0FBUyxHQUFULFNBQVMsQ0FBUTtBQUNsQyxJQUFRLENBQUM7QUFDVCxDQUFDO0FBQ0Q7QUFDWTtBQUNRLElBVFosK0JBQTRCO0FBQUM7QUFDakIsSUFBWixnQ0FBeUI7QUFBQztBQUNkLElBQVosaUNBQTBCO0FBQUM7QUFDZixJQUFaLGdDQUF5QjtBQUFDO0FBQ2QsSUFBWixpQ0FBMEI7QUFDbEM7QUFPQSxNQUFNLE9BQU8sZ0JBQWdCO0FBQUc7QUFBUTtBQUV6QjtBQUFRLElBTW5CLFlBQTZCLE9BQW1CO0FBQ3BELFFBRGlDLFlBQU8sR0FBUCxPQUFPLENBQVk7QUFBQyxRQU52QyxZQUFPLEdBQUcsSUFBSSxZQUFZLEVBQWdCLENBQUM7QUFDekQsSUFNSSxDQUFDO0FBQ0w7QUFDTztBQUNKO0FBQVEsSUFEUCxRQUFRO0FBQUssUUFDVCxJ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QUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFFQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBRUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFFQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBRUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBdkNBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQWhCQSxBQUFBLEFBbUJBLEFBQUEsQUFBQSxBQUFBLEFBRUEsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBRUEsQUFBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERpcmVjdGl2ZSwgRWxlbWVudFJlZiwgRXZlbnRFbWl0dGVyLCBPdXRwdXQsIE9uSW5pdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgUmVzaXplU2Vuc29yIH0gZnJvbSAnY3NzLWVsZW1lbnQtcXVlcmllcyc7XG5cbmV4cG9ydCBjbGFzcyBSZXNpemVkRXZlbnQge1xuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICByZWFkb25seSBlbGVtZW50OiBFbGVtZW50UmVmLFxuICAgICAgICByZWFkb25seSBuZXdXaWR0aDogbnVtYmVyLFxuICAgICAgICByZWFkb25seSBuZXdIZWlnaHQ6IG51bWJlcixcbiAgICAgICAgcmVhZG9ubHkgb2xkV2lkdGg6IG51bWJlcixcbiAgICAgICAgcmVhZG9ubHkgb2xkSGVpZ2h0OiBudW1iZXJcbiAgICApIHsgfVxufVxuXG5ARGlyZWN0aXZlKHtcbiAgICBzZWxlY3RvcjogJ1ttYXRlcmlhUmVzaXplZF0nLFxuICAgIGV4cG9ydEFzOiAnbWF0ZXJpYVJlc2l6ZWQnXG59KVxuZXhwb3J0IGNsYXNzIFJlc2l6ZWREaXJlY3RpdmUgaW1wbGVtZW50cyBPbkluaXQge1xuXG4gICAgQE91dHB1dCgpIHJlc2l6ZWQgPSBuZXcgRXZlbnRFbWl0dGVyPFJlc2l6ZWRFdmVudD4oKTtcblxuICAgIHByaXZhdGUgb2xkV2lkdGg6IG51bWJlcjtcbiAgICBwcml2YXRlIG9sZEhlaWdodDogbnVtYmVyO1xuICAgIHByaXZhdGUgcmVzaXplRXZlbnQ6IFJlc2l6ZVNlbnNvcjtcblxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgcmVhZG9ubHkgZWxlbWVudDogRWxlbWVudFJlZikge1xuICAgIH1cblxuICAgIG5nT25Jbml0KCk6IHZvaWQge1xuICAgICAgICB0aGlzLnJlc2l6ZUV2ZW50ID0gbmV3IFJlc2l6ZVNlbnNvcih0aGlzLmVsZW1lbnQubmF0aXZlRWxlbWVudCwgeCA9PiB0aGlzLm9uUmVzaXplZCgpKTtcbiAgICAgICAgdGhpcy5vblJlc2l6ZWQoKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIG9uUmVzaXplZCgpOiB2b2lkIHtcbiAgICAgICAgY29uc3QgbmV3V2lkdGggPSB0aGlzLmVsZW1lbnQubmF0aXZlRWxlbWVudC5jbGllbnRXaWR0aDtcbiAgICAgICAgY29uc3QgbmV3SGVpZ2h0ID0gdGhpcy5lbGVtZW50Lm5hdGl2ZUVsZW1lbnQuY2xpZW50SGVpZ2h0O1xuXG4gICAgICAgIGlmIChuZXdXaWR0aCA9PT0gdGhpcy5vbGRXaWR0aCAmJiBuZXdIZWlnaHQgPT09IHRoaXMub2xkSGVpZ2h0KSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBldmVudCA9IG5ldyBSZXNpemVkRXZlbnQoXG4gICAgICAgICAgICB0aGlzLmVsZW1lbnQsXG4gICAgICAgICAgICBuZXdXaWR0aCxcbiAgICAgICAgICAgIG5ld0hlaWdodCxcbiAgICAgICAgICAgIHRoaXMub2xkV2lkdGgsXG4gICAgICAgICAgICB0aGlzLm9sZEhlaWdodCk7XG5cbiAgICAgICAgdGhpcy5vbGRXaWR0aCA9IHRoaXMuZWxlbWVudC5uYXRpdmVFbGVtZW50LmNsaWVudFdpZHRoO1xuICAgICAgICB0aGlzLm9sZEhlaWdodCA9IHRoaXMuZWxlbWVudC5uYXRpdmVFbGVtZW50LmNsaWVudEhlaWdodDtcblxuICAgICAgICB0aGlzLnJlc2l6ZWQubmV4dChldmVudCk7XG4gICAgfVxuXG59XG4iXX0=
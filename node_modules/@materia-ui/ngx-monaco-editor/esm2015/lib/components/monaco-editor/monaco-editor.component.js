/**
 * @fileoverview added by tsickle
 * Generated from: lib/components/monaco-editor/monaco-editor.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ViewChild, ElementRef, EventEmitter, Input, ChangeDetectionStrategy, forwardRef, Output } from '@angular/core';
import { NG_VALUE_ACCESSOR, NG_VALIDATORS } from '@angular/forms';
import { filter, take } from 'rxjs/operators';
import { MonacoEditorLoaderService } from '../../services/monaco-editor-loader.service';
export class MonacoEditorComponent {
    /**
     * @param {?} monacoLoader
     */
    constructor(monacoLoader) {
        this.monacoLoader = monacoLoader;
        this.init = new EventEmitter();
        this.propagateChange = (/**
         * @param {?} _
         * @return {?}
         */
        (_) => { });
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.container = this.editorContent.nativeElement;
        this.monacoLoader.isMonacoLoaded$.pipe(filter((/**
         * @param {?} isLoaded
         * @return {?}
         */
        isLoaded => isLoaded)), take(1)).subscribe((/**
         * @return {?}
         */
        () => {
            this.initMonaco();
        }));
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (this.editor && changes.options && !changes.options.firstChange) {
            if (changes.options.previousValue.language !== changes.options.currentValue.language) {
                monaco.editor.setModelLanguage(this.editor.getModel(), this.options && this.options.language ? this.options.language : 'text');
            }
            if (changes.options.previousValue.theme !== changes.options.currentValue.theme) {
                monaco.editor.setTheme(changes.options.currentValue.theme);
            }
            this.editor.updateOptions(changes.options.currentValue);
        }
    }
    /**
     * @param {?} value
     * @return {?}
     */
    writeValue(value) {
        this.value = value;
        if (this.editor && value) {
            this.editor.setValue(value);
        }
        else if (this.editor) {
            this.editor.setValue('');
        }
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnChange(fn) {
        this.propagateChange = fn;
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnTouched(fn) {
        this.onTouched = fn;
    }
    /**
     * @return {?}
     */
    validate() {
        return (!this.parseError) ? null : {
            parseError: {
                valid: false,
            }
        };
    }
    /**
     * @param {?} fn
     * @return {?}
     */
    registerOnValidatorChange(fn) {
        this.onErrorStatusChange = fn;
    }
    /**
     * @private
     * @return {?}
     */
    initMonaco() {
        /** @type {?} */
        let opts = {
            value: [this.value].join('\n'),
            language: 'text',
            automaticLayout: true,
            scrollBeyondLastLine: false,
            theme: 'vc'
        };
        if (this.options) {
            opts = Object.assign({}, opts, this.options);
        }
        this.editor = monaco.editor.create(this.container, opts);
        this.editor.layout();
        this.editor.onDidChangeModelContent((/**
         * @return {?}
         */
        () => {
            this.propagateChange(this.editor.getValue());
        }));
        this.editor.onDidChangeModelDecorations((/**
         * @return {?}
         */
        () => {
            /** @type {?} */
            const pastParseError = this.parseError;
            if (monaco.editor.getModelMarkers({}).map((/**
             * @param {?} m
             * @return {?}
             */
            m => m.message)).join(', ')) {
                this.parseError = true;
            }
            else {
                this.parseError = false;
            }
            if (pastParseError !== this.parseError) {
                this.onErrorStatusChange();
            }
        }));
        this.editor.onDidBlurEditorText((/**
         * @return {?}
         */
        () => {
            this.onTouched();
        }));
        this.init.emit(this.editor);
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onResized(event) {
        if (this.editor) {
            this.editor.layout({
                width: event.newWidth,
                height: event.newHeight
            });
        }
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        if (this.editor) {
            this.editor.dispose();
        }
    }
}
MonacoEditorComponent.decorators = [
    { type: Component, args: [{
                selector: 'ngx-monaco-editor',
                template: `<div #container materiaResized (resized)="onResized($event)" class="editor-container" fxFlex>
	<div class="wrapper">
		<div
			#editor
			class="monaco-editor"
			[style.width.px]="container.offsetWidth"
			[style.height.px]="container.offsetHeight" style="min-width: 0;"
		></div>
	</div>
</div>`,
                changeDetection: ChangeDetectionStrategy.OnPush,
                providers: [
                    {
                        provide: NG_VALUE_ACCESSOR,
                        useExisting: forwardRef((/**
                         * @return {?}
                         */
                        () => MonacoEditorComponent)),
                        multi: true
                    },
                    {
                        provide: NG_VALIDATORS,
                        useExisting: forwardRef((/**
                         * @return {?}
                         */
                        () => MonacoEditorComponent)),
                        multi: true,
                    }
                ],
                styles: [`:host {
	flex: 1;
	box-sizing: border-box;
	flex-direction: column;
	display: flex;
	overflow: hidden;
	max-width: 100%;
	min-wdith: 0;
}
.wrapper {
	width: 0px; height: 0px;
}
.editor-container {
	text-overflow: ellipsis;
	overflow: hidden;
	position: relative;
	min-width: 0;
	display: table;
	width: 100%;
	height: 100%;
}`]
            }] }
];
/** @nocollapse */
MonacoEditorComponent.ctorParameters = () => [
    { type: MonacoEditorLoaderService }
];
MonacoEditorComponent.propDecorators = {
    options: [{ type: Input }],
    init: [{ type: Output }],
    editorContent: [{ type: ViewChild, args: ['editor', { static: true },] }]
};
if (false) {
    /** @type {?} */
    MonacoEditorComponent.prototype.options;
    /** @type {?} */
    MonacoEditorComponent.prototype.init;
    /** @type {?} */
    MonacoEditorComponent.prototype.editorContent;
    /** @type {?} */
    MonacoEditorComponent.prototype.container;
    /** @type {?} */
    MonacoEditorComponent.prototype.editor;
    /** @type {?} */
    MonacoEditorComponent.prototype.value;
    /** @type {?} */
    MonacoEditorComponent.prototype.parseError;
    /**
     * @type {?}
     * @private
     */
    MonacoEditorComponent.prototype.onTouched;
    /**
     * @type {?}
     * @private
     */
    MonacoEditorComponent.prototype.onErrorStatusChange;
    /**
     * @type {?}
     * @private
     */
    MonacoEditorComponent.prototype.propagateChange;
    /**
     * @type {?}
     * @private
     */
    MonacoEditorComponent.prototype.monacoLoader;
}
//# sourceMappingURL=data:application/json;base64,
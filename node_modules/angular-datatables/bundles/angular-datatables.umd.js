(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(require('@angular/core'),require('@angular/common'),exports, require('@angular/core'), require('rxjs'), require('@angular/common')) :
    typeof define === 'function' && define.amd ? define(['@angular/core','@angular/common','exports', '@angular/core', 'rxjs', '@angular/common'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.ng.core,global.ng.common,(global.angular = global.angular || {}, global.angular.datatables = {}), global.ng.core, null, global.ng.common));
}(this, (function (ɵngcc0,ɵngcc1,exports, core, rxjs, common) { 'use strict';

    /**
     * @license
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://raw.githubusercontent.com/l-lin/angular-datatables/master/LICENSE
     */
    var DataTableDirective = /** @class */ (function () {
        function DataTableDirective(el) {
            this.el = el;
            /**
             * The DataTable option you pass to configure your table.
             */
            this.dtOptions = {};
        }
        DataTableDirective.prototype.ngOnInit = function () {
            var _this = this;
            if (this.dtTrigger) {
                this.dtTrigger.subscribe(function () {
                    _this.displayTable();
                });
            }
            else {
                this.displayTable();
            }
        };
        DataTableDirective.prototype.ngOnDestroy = function () {
            if (this.dtTrigger) {
                this.dtTrigger.unsubscribe();
            }
            if (this.dt) {
                this.dt.destroy(true);
            }
        };
        DataTableDirective.prototype.displayTable = function () {
            var _this = this;
            this.dtInstance = new Promise(function (resolve, reject) {
                Promise.resolve(_this.dtOptions).then(function (dtOptions) {
                    // Using setTimeout as a "hack" to be "part" of NgZone
                    setTimeout(function () {
                        _this.dt = $(_this.el.nativeElement).DataTable(dtOptions);
                        resolve(_this.dt);
                    });
                });
            });
        };
        DataTableDirective.ctorParameters = function () { return [
            { type: core.ElementRef }
        ]; };
        DataTableDirective.propDecorators = {
            dtOptions: [{ type: core.Input }],
            dtTrigger: [{ type: core.Input }]
        };
DataTableDirective.ɵfac = function DataTableDirective_Factory(t) { return new (t || DataTableDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef)); };
DataTableDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: DataTableDirective, selectors: [["", "datatable", ""]], inputs: { dtOptions: "dtOptions", dtTrigger: "dtTrigger" } });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DataTableDirective, [{
        type: core.Directive,
        args: [{
                selector: '[datatable]'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }]; }, { dtOptions: [{
            type: core.Input
        }], dtTrigger: [{
            type: core.Input
        }] }); })();
        return DataTableDirective;
    }());

    /**
     * @license
     *
     * Use of this source code is governed by an MIT-style license that can be
     * found in the LICENSE file at https://raw.githubusercontent.com/l-lin/angular-datatables/master/LICENSE
     */
    var DataTablesModule = /** @class */ (function () {
        function DataTablesModule() {
        }
        DataTablesModule.forRoot = function () {
            return {
                ngModule: DataTablesModule
            };
        };
DataTablesModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: DataTablesModule });
DataTablesModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function DataTablesModule_Factory(t) { return new (t || DataTablesModule)(); }, imports: [[common.CommonModule]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(DataTablesModule, { declarations: [DataTableDirective], imports: [ɵngcc1.CommonModule], exports: [DataTableDirective] }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DataTablesModule, [{
        type: core.NgModule,
        args: [{
                imports: [common.CommonModule],
                declarations: [DataTableDirective],
                exports: [DataTableDirective]
            }]
    }], function () { return []; }, null); })();
        return DataTablesModule;
    }());

    exports.DataTableDirective = DataTableDirective;
    exports.DataTablesModule = DataTablesModule;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYW5ndWxhci1kYXRhdGFibGVzLnVtZC5qcyIsInNvdXJjZXMiOlsiYW5ndWxhci1kYXRhdGFibGVzLnVtZC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBLCtIQUEyRTtBQUMzRSwyRkFBeUQ7QUFDekQsdUhBQXVGO0FBQ3ZGLGlDQUFtQjtBQUNuQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUtVO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7Ozs7OztvQkFBVTtBQUNWO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7Ozs7Ozs7O2dEQU9VO0FBQ1Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcclxuICAgIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJyA/IGZhY3RvcnkoZXhwb3J0cywgcmVxdWlyZSgnQGFuZ3VsYXIvY29yZScpLCByZXF1aXJlKCdyeGpzJyksIHJlcXVpcmUoJ0Bhbmd1bGFyL2NvbW1vbicpKSA6XHJcbiAgICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoWydleHBvcnRzJywgJ0Bhbmd1bGFyL2NvcmUnLCAncnhqcycsICdAYW5ndWxhci9jb21tb24nXSwgZmFjdG9yeSkgOlxyXG4gICAgKGdsb2JhbCA9IHR5cGVvZiBnbG9iYWxUaGlzICE9PSAndW5kZWZpbmVkJyA/IGdsb2JhbFRoaXMgOiBnbG9iYWwgfHwgc2VsZiwgZmFjdG9yeSgoZ2xvYmFsLmFuZ3VsYXIgPSBnbG9iYWwuYW5ndWxhciB8fCB7fSwgZ2xvYmFsLmFuZ3VsYXIuZGF0YXRhYmxlcyA9IHt9KSwgZ2xvYmFsLm5nLmNvcmUsIG51bGwsIGdsb2JhbC5uZy5jb21tb24pKTtcclxufSh0aGlzLCAoZnVuY3Rpb24gKGV4cG9ydHMsIGNvcmUsIHJ4anMsIGNvbW1vbikgeyAndXNlIHN0cmljdCc7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAbGljZW5zZVxyXG4gICAgICpcclxuICAgICAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXHJcbiAgICAgKiBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGF0IGh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9sLWxpbi9hbmd1bGFyLWRhdGF0YWJsZXMvbWFzdGVyL0xJQ0VOU0VcclxuICAgICAqL1xyXG4gICAgdmFyIERhdGFUYWJsZURpcmVjdGl2ZSA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBmdW5jdGlvbiBEYXRhVGFibGVEaXJlY3RpdmUoZWwpIHtcclxuICAgICAgICAgICAgdGhpcy5lbCA9IGVsO1xyXG4gICAgICAgICAgICAvKipcclxuICAgICAgICAgICAgICogVGhlIERhdGFUYWJsZSBvcHRpb24geW91IHBhc3MgdG8gY29uZmlndXJlIHlvdXIgdGFibGUuXHJcbiAgICAgICAgICAgICAqL1xyXG4gICAgICAgICAgICB0aGlzLmR0T3B0aW9ucyA9IHt9O1xyXG4gICAgICAgIH1cclxuICAgICAgICBEYXRhVGFibGVEaXJlY3RpdmUucHJvdG90eXBlLm5nT25Jbml0ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xyXG4gICAgICAgICAgICBpZiAodGhpcy5kdFRyaWdnZXIpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuZHRUcmlnZ2VyLnN1YnNjcmliZShmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMuZGlzcGxheVRhYmxlKCk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuZGlzcGxheVRhYmxlKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgICAgIERhdGFUYWJsZURpcmVjdGl2ZS5wcm90b3R5cGUubmdPbkRlc3Ryb3kgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLmR0VHJpZ2dlcikge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5kdFRyaWdnZXIudW5zdWJzY3JpYmUoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAodGhpcy5kdCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5kdC5kZXN0cm95KHRydWUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuICAgICAgICBEYXRhVGFibGVEaXJlY3RpdmUucHJvdG90eXBlLmRpc3BsYXlUYWJsZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdmFyIF90aGlzID0gdGhpcztcclxuICAgICAgICAgICAgdGhpcy5kdEluc3RhbmNlID0gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xyXG4gICAgICAgICAgICAgICAgUHJvbWlzZS5yZXNvbHZlKF90aGlzLmR0T3B0aW9ucykudGhlbihmdW5jdGlvbiAoZHRPcHRpb25zKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gVXNpbmcgc2V0VGltZW91dCBhcyBhIFwiaGFja1wiIHRvIGJlIFwicGFydFwiIG9mIE5nWm9uZVxyXG4gICAgICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5kdCA9ICQoX3RoaXMuZWwubmF0aXZlRWxlbWVudCkuRGF0YVRhYmxlKGR0T3B0aW9ucyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUoX3RoaXMuZHQpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgRGF0YVRhYmxlRGlyZWN0aXZlLmRlY29yYXRvcnMgPSBbXHJcbiAgICAgICAgICAgIHsgdHlwZTogY29yZS5EaXJlY3RpdmUsIGFyZ3M6IFt7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGVjdG9yOiAnW2RhdGF0YWJsZV0nXHJcbiAgICAgICAgICAgICAgICAgICAgfSxdIH1cclxuICAgICAgICBdO1xyXG4gICAgICAgIERhdGFUYWJsZURpcmVjdGl2ZS5jdG9yUGFyYW1ldGVycyA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIFtcclxuICAgICAgICAgICAgeyB0eXBlOiBjb3JlLkVsZW1lbnRSZWYgfVxyXG4gICAgICAgIF07IH07XHJcbiAgICAgICAgRGF0YVRhYmxlRGlyZWN0aXZlLnByb3BEZWNvcmF0b3JzID0ge1xyXG4gICAgICAgICAgICBkdE9wdGlvbnM6IFt7IHR5cGU6IGNvcmUuSW5wdXQgfV0sXHJcbiAgICAgICAgICAgIGR0VHJpZ2dlcjogW3sgdHlwZTogY29yZS5JbnB1dCB9XVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgcmV0dXJuIERhdGFUYWJsZURpcmVjdGl2ZTtcclxuICAgIH0oKSk7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAbGljZW5zZVxyXG4gICAgICpcclxuICAgICAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIE1JVC1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXHJcbiAgICAgKiBmb3VuZCBpbiB0aGUgTElDRU5TRSBmaWxlIGF0IGh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9sLWxpbi9hbmd1bGFyLWRhdGF0YWJsZXMvbWFzdGVyL0xJQ0VOU0VcclxuICAgICAqL1xyXG4gICAgdmFyIERhdGFUYWJsZXNNb2R1bGUgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgZnVuY3Rpb24gRGF0YVRhYmxlc01vZHVsZSgpIHtcclxuICAgICAgICB9XHJcbiAgICAgICAgRGF0YVRhYmxlc01vZHVsZS5mb3JSb290ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgbmdNb2R1bGU6IERhdGFUYWJsZXNNb2R1bGVcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIERhdGFUYWJsZXNNb2R1bGUuZGVjb3JhdG9ycyA9IFtcclxuICAgICAgICAgICAgeyB0eXBlOiBjb3JlLk5nTW9kdWxlLCBhcmdzOiBbe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpbXBvcnRzOiBbY29tbW9uLkNvbW1vbk1vZHVsZV0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlY2xhcmF0aW9uczogW0RhdGFUYWJsZURpcmVjdGl2ZV0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGV4cG9ydHM6IFtEYXRhVGFibGVEaXJlY3RpdmVdXHJcbiAgICAgICAgICAgICAgICAgICAgfSxdIH1cclxuICAgICAgICBdO1xyXG4gICAgICAgIHJldHVybiBEYXRhVGFibGVzTW9kdWxlO1xyXG4gICAgfSgpKTtcclxuXHJcbiAgICBleHBvcnRzLkRhdGFUYWJsZURpcmVjdGl2ZSA9IERhdGFUYWJsZURpcmVjdGl2ZTtcclxuICAgIGV4cG9ydHMuRGF0YVRhYmxlc01vZHVsZSA9IERhdGFUYWJsZXNNb2R1bGU7XHJcblxyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcclxuXHJcbn0pKSk7XHJcbiJdfQ==
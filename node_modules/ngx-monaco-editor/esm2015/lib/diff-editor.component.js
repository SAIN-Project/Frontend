import { Component, Inject, Input } from '@angular/core';
import { fromEvent } from 'rxjs';
import { BaseEditor } from './base-editor';
import { NGX_MONACO_EDITOR_CONFIG } from './config';
import * as ɵngcc0 from '@angular/core';
export class DiffEditorComponent extends BaseEditor {
    constructor(editorConfig) {
        super(editorConfig);
        this.editorConfig = editorConfig;
    }
    set options(options) {
        this._options = Object.assign({}, this.config.defaultOptions, options);
        if (this._editor) {
            this._editor.dispose();
            this.initMonaco(options);
        }
    }
    get options() {
        return this._options;
    }
    set originalModel(model) {
        this._originalModel = model;
        if (this._editor) {
            this._editor.dispose();
            this.initMonaco(this.options);
        }
    }
    set modifiedModel(model) {
        this._modifiedModel = model;
        if (this._editor) {
            this._editor.dispose();
            this.initMonaco(this.options);
        }
    }
    initMonaco(options) {
        if (!this._originalModel || !this._modifiedModel) {
            throw new Error('originalModel or modifiedModel not found for ngx-monaco-diff-editor');
        }
        this._originalModel.language = this._originalModel.language || options.language;
        this._modifiedModel.language = this._modifiedModel.language || options.language;
        let originalModel = monaco.editor.createModel(this._originalModel.code, this._originalModel.language);
        let modifiedModel = monaco.editor.createModel(this._modifiedModel.code, this._modifiedModel.language);
        this._editorContainer.nativeElement.innerHTML = '';
        const theme = options.theme;
        this._editor = monaco.editor.createDiffEditor(this._editorContainer.nativeElement, options);
        options.theme = theme;
        this._editor.setModel({
            original: originalModel,
            modified: modifiedModel
        });
        // refresh layout on resize event.
        if (this._windowResizeSubscription) {
            this._windowResizeSubscription.unsubscribe();
        }
        this._windowResizeSubscription = fromEvent(window, 'resize').subscribe(() => this._editor.layout());
        this.onInit.emit(this._editor);
    }
}
DiffEditorComponent.ɵfac = function DiffEditorComponent_Factory(t) { return new (t || DiffEditorComponent)(ɵngcc0.ɵɵdirectiveInject(NGX_MONACO_EDITOR_CONFIG)); };
DiffEditorComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: DiffEditorComponent, selectors: [["ngx-monaco-diff-editor"]], inputs: { options: "options", originalModel: "originalModel", modifiedModel: "modifiedModel" }, features: [ɵngcc0.ɵɵInheritDefinitionFeature], decls: 2, vars: 0, consts: [[1, "editor-container"], ["editorContainer", ""]], template: function DiffEditorComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelement(0, "div", 0, 1);
    } }, styles: ["[_nghost-%COMP%] {\n      display: block;\n      height: 200px;\n    }\n\n    .editor-container[_ngcontent-%COMP%] {\n      width: 100%;\n      height: 98%;\n    }"] });
DiffEditorComponent.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [NGX_MONACO_EDITOR_CONFIG,] }] }
];
DiffEditorComponent.propDecorators = {
    options: [{ type: Input, args: ['options',] }],
    originalModel: [{ type: Input, args: ['originalModel',] }],
    modifiedModel: [{ type: Input, args: ['modifiedModel',] }]
};
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(DiffEditorComponent, [{
        type: Component,
        args: [{
                selector: 'ngx-monaco-diff-editor',
                template: '<div class="editor-container" #editorContainer></div>',
                styles: [`
    :host {
      display: block;
      height: 200px;
    }

    .editor-container {
      width: 100%;
      height: 98%;
    }
  `]
            }]
    }], function () { return [{ type: undefined, decorators: [{
                type: Inject,
                args: [NGX_MONACO_EDITOR_CONFIG]
            }] }]; }, { options: [{
            type: Input,
            args: ['options']
        }], originalModel: [{
            type: Input,
            args: ['originalModel']
        }], modifiedModel: [{
            type: Input,
            args: ['modifiedModel']
        }] }); })();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
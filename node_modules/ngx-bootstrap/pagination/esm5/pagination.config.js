/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// todo: split
import { Injectable } from '@angular/core';
import * as i0 from "@angular/core";
/**
 * Provides default values for Pagination and pager components
 */
import * as ɵngcc0 from '@angular/core';
var PaginationConfig = /** @class */ (function () {
    function PaginationConfig() {
        this.main = {
            maxSize: void 0,
            itemsPerPage: 10,
            boundaryLinks: false,
            directionLinks: true,
            firstText: 'First',
            previousText: 'Previous',
            nextText: 'Next',
            lastText: 'Last',
            pageBtnClass: '',
            rotate: true
        };
        this.pager = {
            itemsPerPage: 15,
            previousText: '« Previous',
            nextText: 'Next »',
            pageBtnClass: '',
            align: true
        };
    }
    /** @nocollapse */ PaginationConfig.ɵprov = i0.ɵɵdefineInjectable({ factory: function PaginationConfig_Factory() { return new PaginationConfig(); }, token: PaginationConfig, providedIn: "root" });
PaginationConfig.ɵfac = function PaginationConfig_Factory(t) { return new (t || PaginationConfig)(); };
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(PaginationConfig, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return []; }, null); })();
    return PaginationConfig;
}());
export { PaginationConfig };
if (false) {
    /** @type {?} */
    PaginationConfig.prototype.main;
    /** @type {?} */
    PaginationConfig.prototype.pager;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFnaW5hdGlvbi5jb25maWcuanMiLCJzb3VyY2VzIjpbIm5neC1ib290c3RyYXAvcGFnaW5hdGlvbi9wYWdpbmF0aW9uLmNvbmZpZy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUNBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0M7QUFDb0M7QUFBSTtBQUVVOztBQUNsRDtBQUdjLElBSGQ7QUFDZ0IsUUFHZCxTQUFJLEdBQWdCO0FBQ3RCLFlBQUksT0FBTyxFQUFFLEtBQUssQ0FBQztBQUNuQixZQUFJLFlBQVksRUFBRSxFQUFFO0FBQ3BCLFlBQUksYUFBYSxFQUFFLEtBQUs7QUFDeEIsWUFBSSxjQUFjLEVBQUUsSUFBSTtBQUN4QixZQUFJLFNBQVMsRUFBRSxPQUFPO0FBQ3RCLFlBQUksWUFBWSxFQUFFLFVBQVU7QUFDNUIsWUFBSSxRQUFRLEVBQUUsTUFBTTtBQUNwQixZQUFJLFFBQVEsRUFBRSxNQUFNO0FBQ3BCLFlBQUksWUFBWSxFQUFFLEVBQUU7QUFDcEIsWUFBSSxNQUFNLEVBQUUsSUFBSTtBQUNoQixTQUFHLENBQUM7QUFDSixRQUFFLFVBQUssR0FBZTtBQUN0QixZQUFJLFlBQVksRUFBRSxFQUFFO0FBQ3BCLFlBQUksWUFBWSxFQUFFLFlBQVk7QUFDOUIsWUFBSSxRQUFRLEVBQUUsUUFBUTtBQUN0QixZQUFJLFlBQVksRUFBRSxFQUFFO0FBQ3BCLFlBQUksS0FBSyxFQUFFLElBQUk7QUFDZixTQUFHLENBQUM7QUFDSixLQUFDLEFBcEJRO29EQUhSLFVBQVUsU0FBQyxzQkFDVixVQUFVLEVBQUUsTUFBTSxrQkFDbkIsaklBQ1M7Ozs7Ozs7Z0RBUUw7QUFBQywyQkFqQk47QUFBRSxDQTZCRCxBQXZCRCxJQXVCQztBQUNELFNBckJhLGdCQUFnQjtBQUM1QjtBQUFhO0FBQ0gsSUFEVCxnQ0FXRTtBQUNKO0FBQXFCLElBQW5CLGlDQU1FOztBQTNCQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBS0EsQUFBQSxBQUlBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQXZCQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBUkEsQUE2QkEsQUF2QkEsQUF1QkEsQUFwQkEsQUFBQSxBQUNBLEFBV0EsQUFDQSxBQU1BIiwic291cmNlc0NvbnRlbnQiOlsiLy8gdG9kbzogc3BsaXRcbmltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHsgQ29uZmlnTW9kZWwsIFBhZ2VyTW9kZWwgfSBmcm9tICcuL21vZGVscyc7XG5cbi8qKiBQcm92aWRlcyBkZWZhdWx0IHZhbHVlcyBmb3IgUGFnaW5hdGlvbiBhbmQgcGFnZXIgY29tcG9uZW50cyAqL1xuQEluamVjdGFibGUoe1xuICBwcm92aWRlZEluOiAncm9vdCdcbn0pXG5leHBvcnQgY2xhc3MgUGFnaW5hdGlvbkNvbmZpZyB7XG4gIG1haW46IENvbmZpZ01vZGVsID0ge1xuICAgIG1heFNpemU6IHZvaWQgMCxcbiAgICBpdGVtc1BlclBhZ2U6IDEwLFxuICAgIGJvdW5kYXJ5TGlua3M6IGZhbHNlLFxuICAgIGRpcmVjdGlvbkxpbmtzOiB0cnVlLFxuICAgIGZpcnN0VGV4dDogJ0ZpcnN0JyxcbiAgICBwcmV2aW91c1RleHQ6ICdQcmV2aW91cycsXG4gICAgbmV4dFRleHQ6ICdOZXh0JyxcbiAgICBsYXN0VGV4dDogJ0xhc3QnLFxuICAgIHBhZ2VCdG5DbGFzczogJycsXG4gICAgcm90YXRlOiB0cnVlXG4gIH07XG4gIHBhZ2VyOiBQYWdlck1vZGVsID0ge1xuICAgIGl0ZW1zUGVyUGFnZTogMTUsXG4gICAgcHJldmlvdXNUZXh0OiAnwqsgUHJldmlvdXMnLFxuICAgIG5leHRUZXh0OiAnTmV4dCDCuycsXG4gICAgcGFnZUJ0bkNsYXNzOiAnJyxcbiAgICBhbGlnbjogdHJ1ZVxuICB9O1xufVxuIl19
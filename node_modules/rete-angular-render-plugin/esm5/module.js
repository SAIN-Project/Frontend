import * as tslib_1 from "tslib";
import { NgModule, Injector } from '@angular/core';
import { CommonModule } from '@angular/common';
import { createCustomElement } from '@angular/elements';
import { KebabPipe } from './kebab.pipe';
import { NodeComponent } from './node/node.component';
import { SocketComponent } from './socket/socket.component';
import { ControlDirective } from './control.directive';
import { SocketDirective } from './socket.directive';
import { CustomComponent } from './custom.component';
import * as ɵngcc0 from '@angular/core';
var ReteModule = /** @class */ (function () {
    function ReteModule(injector) {
        var CustomElement = createCustomElement(CustomComponent, { injector: injector });
        if (!customElements.get('rete-element'))
            customElements.define('rete-element', CustomElement);
    }
    ReteModule.ctorParameters = function () { return [
        { type: Injector }
    ]; };
ReteModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: ReteModule });
ReteModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function ReteModule_Factory(t) { return new (t || ReteModule)(ɵngcc0.ɵɵinject(ɵngcc0.Injector)); }, providers: [
        KebabPipe,
        ControlDirective
    ], imports: [[
            CommonModule
        ]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(ReteModule, { declarations: function () { return [NodeComponent,
        SocketComponent,
        CustomComponent,
        ControlDirective,
        SocketDirective,
        KebabPipe]; }, imports: function () { return [CommonModule]; }, exports: function () { return [NodeComponent,
        CustomComponent,
        SocketComponent,
        ControlDirective,
        SocketDirective,
        KebabPipe]; } }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ReteModule, [{
        type: NgModule,
        args: [{
                declarations: [
                    NodeComponent,
                    SocketComponent,
                    CustomComponent,
                    ControlDirective,
                    SocketDirective,
                    KebabPipe,
                ],
                imports: [
                    CommonModule
                ],
                providers: [
                    KebabPipe,
                    ControlDirective
                ],
                exports: [
                    NodeComponent,
                    CustomComponent,
                    SocketComponent,
                    ControlDirective,
                    SocketDirective,
                    KebabPipe
                ],
                entryComponents: [
                    NodeComponent,
                    SocketComponent,
                    CustomComponent
                ]
            }]
    }], function () { return [{ type: ɵngcc0.Injector }]; }, null); })();
    return ReteModule;
}());
export { ReteModule };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9kdWxlLmpzIiwic291cmNlcyI6WyJyZXRlLWFuZ3VsYXItcmVuZGVyLXBsdWdpbi9tb2R1bGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxRQUFRLEVBQUUsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ25ELE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUMvQyxPQUFPLEVBQUUsbUJBQW1CLEVBQUUsTUFBTSxtQkFBbUIsQ0FBQztBQUV4RCxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sY0FBYyxDQUFDO0FBQ3pDLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUN0RCxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sMkJBQTJCLENBQUM7QUFDNUQsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDdkQsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBQ3JELE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQzs7QUFnQ3JEO0FBQ29CLElBQWxCLG9CQUFZLFFBQWtCO0FBQUksUUFDaEMsSUFBTSxhQUFhLEdBQUcsbUJBQW1CLENBQUMsZUFBZSxFQUFFLEVBQUUsUUFBUSxVQUFBLEVBQUUsQ0FBQyxDQUFDO0FBQzdFLFFBQUksSUFBSSxDQUFDLGNBQWMsQ0FBQyxHQUFHLENBQUMsY0FBYyxDQUFDO0FBQUUsWUFBQSxjQUFjLENBQUMsTUFBTSxDQUFDLGNBQWMsRUFBRSxhQUFhLENBQUMsQ0FBQztBQUNsRyxJQUFFLENBQUM7QUFDSDtBQUNxRCxnQkFMN0IsUUFBUTtBQUFHO0lBRHRCLFVBQVUsZ0NBOUJ0QixRQUFRLENBQUM7SUFDUixZQUFZLEVBQUUsa0JBQ1osYUFBYSxrQkFDYixlQUFlLGtCQUNmLGVBQWUsa0JBQ2YsZ0JBQWdCO0NBQ2hCLGVBQWU7ZUFDZixTQUFTO2NBQ1Y7U0FDRCxPQUFPLEVBQUU7V0FDUDtRQUFZLGNBQ2IsY0FDRCxTQUFTLEVBQUUsa0JBQ1QsU0FBUyxrQkFDVCxnQkFBZ0IsY0FDakIsY0FDRCxPQUFPLEVBQUU7TUFDUCxhQUFhO1lBQ2I7RUFBZSxrQkFDZjtTQUFlO0VBQ2YsZ0JBQWdCLGtCQUNoQixlQUFlLGtCQUNmLFNBQVMsY0FDVixjQUNEO0dBQWUsRUFBRSxrQkFDZjtXQUFhO0lBQ2IsZUFBZTtXQUNmO0NBQWUsY0FDaEIsVUFDRixDQUFDO0VBQ1csVUFBVSxDQUt0Qjs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7eUVBQ0Q7QUFBQyxJQURELGlCQUFDO0FBQ0EsQ0FEQSxBQUxELElBS0M7O0FBOUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFFQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFnQ0EsQUFDQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBSEEsQUFBQSxBQURBLEFBQUEsQUE5QkEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFDQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFDQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQ0EsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFDQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBS0EsQUFBQSxBQUFBLEFBQUEsQUFMQSxBQUtBLEFBTEEsQUFBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5nTW9kdWxlLCBJbmplY3RvciB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQ29tbW9uTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcbmltcG9ydCB7IGNyZWF0ZUN1c3RvbUVsZW1lbnQgfSBmcm9tICdAYW5ndWxhci9lbGVtZW50cyc7XG5cbmltcG9ydCB7IEtlYmFiUGlwZSB9IGZyb20gJy4va2ViYWIucGlwZSc7XG5pbXBvcnQgeyBOb2RlQ29tcG9uZW50IH0gZnJvbSAnLi9ub2RlL25vZGUuY29tcG9uZW50JztcbmltcG9ydCB7IFNvY2tldENvbXBvbmVudCB9IGZyb20gJy4vc29ja2V0L3NvY2tldC5jb21wb25lbnQnO1xuaW1wb3J0IHsgQ29udHJvbERpcmVjdGl2ZSB9IGZyb20gJy4vY29udHJvbC5kaXJlY3RpdmUnO1xuaW1wb3J0IHsgU29ja2V0RGlyZWN0aXZlIH0gZnJvbSAnLi9zb2NrZXQuZGlyZWN0aXZlJztcbmltcG9ydCB7IEN1c3RvbUNvbXBvbmVudCB9IGZyb20gJy4vY3VzdG9tLmNvbXBvbmVudCc7XG5cbkBOZ01vZHVsZSh7XG4gIGRlY2xhcmF0aW9uczogW1xuICAgIE5vZGVDb21wb25lbnQsXG4gICAgU29ja2V0Q29tcG9uZW50LFxuICAgIEN1c3RvbUNvbXBvbmVudCxcbiAgICBDb250cm9sRGlyZWN0aXZlLFxuICAgIFNvY2tldERpcmVjdGl2ZSxcbiAgICBLZWJhYlBpcGUsXG4gIF0sXG4gIGltcG9ydHM6IFtcbiAgICBDb21tb25Nb2R1bGVcbiAgXSxcbiAgcHJvdmlkZXJzOiBbXG4gICAgS2ViYWJQaXBlLFxuICAgIENvbnRyb2xEaXJlY3RpdmVcbiAgXSxcbiAgZXhwb3J0czogW1xuICAgIE5vZGVDb21wb25lbnQsXG4gICAgQ3VzdG9tQ29tcG9uZW50LFxuICAgIFNvY2tldENvbXBvbmVudCxcbiAgICBDb250cm9sRGlyZWN0aXZlLFxuICAgIFNvY2tldERpcmVjdGl2ZSxcbiAgICBLZWJhYlBpcGVcbiAgXSxcbiAgZW50cnlDb21wb25lbnRzOiBbXG4gICAgTm9kZUNvbXBvbmVudCxcbiAgICBTb2NrZXRDb21wb25lbnQsXG4gICAgQ3VzdG9tQ29tcG9uZW50XG4gIF1cbn0pXG5leHBvcnQgY2xhc3MgUmV0ZU1vZHVsZSB7XG4gIGNvbnN0cnVjdG9yKGluamVjdG9yOiBJbmplY3RvcikgeyAvLyBTdGF0aWNJbmplY3RvckVycm9yIGR1ZSB0byAnbnBtIGxpbmsnXG4gICAgY29uc3QgQ3VzdG9tRWxlbWVudCA9IGNyZWF0ZUN1c3RvbUVsZW1lbnQoQ3VzdG9tQ29tcG9uZW50LCB7IGluamVjdG9yIH0pO1xuICAgIGlmICghY3VzdG9tRWxlbWVudHMuZ2V0KCdyZXRlLWVsZW1lbnQnKSkgY3VzdG9tRWxlbWVudHMuZGVmaW5lKCdyZXRlLWVsZW1lbnQnLCBDdXN0b21FbGVtZW50KTtcbiAgfVxufVxuIl19
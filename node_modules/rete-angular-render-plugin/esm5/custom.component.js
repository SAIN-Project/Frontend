import * as tslib_1 from "tslib";
import { Component, Input, OnInit, Injector, ComponentFactoryResolver, ViewContainerRef, Type, ChangeDetectionStrategy } from '@angular/core';
import * as ɵngcc0 from '@angular/core';
var CustomComponent = /** @class */ (function () {
    function CustomComponent(vcr, injector, factoryResolver) {
        this.vcr = vcr;
        this.injector = injector;
        this.factoryResolver = factoryResolver;
    }
    CustomComponent.prototype.ngOnInit = function () {
        var factory = this.factoryResolver.resolveComponentFactory(this.component);
        var componentRef = factory.create(this.injector);
        var props = this.props;
        var _loop_1 = function (key) {
            Object.defineProperty(componentRef.instance, key, {
                get: function () { return props[key]; },
                set: function (val) { props[key] = val; }
            });
        };
        for (var key in props) {
            _loop_1(key);
        }
        this.vcr.insert(componentRef.hostView);
    };
    CustomComponent.prototype.ngOnDestroy = function () {
        this.vcr.detach(0);
    };
    CustomComponent.ctorParameters = function () { return [
        { type: ViewContainerRef },
        { type: Injector },
        { type: ComponentFactoryResolver }
    ]; };
    tslib_1.__decorate([
        Input()
    ], CustomComponent.prototype, "component", void 0);
    tslib_1.__decorate([
        Input()
    ], CustomComponent.prototype, "props", void 0);
CustomComponent.ɵfac = function CustomComponent_Factory(t) { return new (t || CustomComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Injector), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ComponentFactoryResolver)); };
CustomComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: CustomComponent, selectors: [["ng-component"]], inputs: { component: "component", props: "props" }, decls: 0, vars: 0, template: function CustomComponent_Template(rf, ctx) { }, encapsulation: 2, changeDetection: 0 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CustomComponent, [{
        type: Component,
        args: [{
                template: '',
                changeDetection: ChangeDetectionStrategy.OnPush
            }]
    }], function () { return [{ type: ɵngcc0.ViewContainerRef }, { type: ɵngcc0.Injector }, { type: ɵngcc0.ComponentFactoryResolver }]; }, { component: [{
            type: Input
        }], props: [{
            type: Input
        }] }); })();
    return CustomComponent;
}());
export { CustomComponent };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3VzdG9tLmNvbXBvbmVudC5qcyIsInNvdXJjZXMiOlsicmV0ZS1hbmd1bGFyLXJlbmRlci1wbHVnaW4vY3VzdG9tLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFFLFFBQVEsRUFBRSx3QkFBd0IsRUFBRSxnQkFBZ0IsRUFBRSxJQUFJLEVBQUUsdUJBQXVCLEVBQUUsTUFBTSxlQUFlLENBQUM7O0FBTzlJO0FBQ0UsSUFHQSx5QkFDVSxHQUFxQixFQUNyQixRQUFrQixFQUNsQixlQUF5QztBQUNsRCxRQUhTLFFBQUcsR0FBSCxHQUFHLENBQWtCO0FBQUMsUUFDdEIsYUFBUSxHQUFSLFFBQVEsQ0FBVTtBQUFDLFFBQ25CLG9CQUFlLEdBQWYsZUFBZSxDQUEwQjtBQUNyRCxJQUFLLENBQUM7QUFDTixJQUNFLGtDQUFRLEdBQVI7QUFDRCxRQUFHLElBQU0sT0FBTyxHQUFHLElBQUksQ0FBQyxlQUFlLENBQUMsdUJBQXVCLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO0FBQ2pGLFFBQUksSUFBTSxZQUFZLEdBQUcsT0FBTyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7QUFDdkQsUUFBWSxJQUFBLGtCQUFLLENBQVU7QUFDM0IsZ0NBQ1ksR0FBRztBQUFJLFlBQ2IsTUFBTSxDQUFDLGNBQWMsQ0FBQyxZQUFZLENBQUMsUUFBUSxFQUFFLEdBQUcsRUFBRTtBQUN4RCxnQkFBUSxHQUFHLGdCQUFLLE9BQU8sS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUNwQyxnQkFBUSxHQUFHLFlBQUMsR0FBRyxJQUFJLEtBQUssQ0FBQyxHQUFHLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDO0FBQ3RDLGFBQU8sQ0FBQyxDQUFBO0FBQ1IsUUFBSSxDQUFDO0FBRUwsUUFQSSxLQUFJLElBQUksR0FBRyxJQUFJLEtBQUs7QUFDeEIsb0JBRFksR0FBRztBQUFHLFNBS2I7QUFDTCxRQUNJLElBQUksQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLFlBQVksQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUMzQyxJQUFFLENBQUM7QUFFSCxJQUFFLHFDQUFXLEdBQVg7QUFBYyxRQUNaLElBQUksQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ3ZCLElBQUUsQ0FBQztBQUNGO0FBQzBELGdCQXhCMUMsZ0JBQWdCO0FBQy9CLGdCQUFvQixRQUFRO0FBQzVCLGdCQUEyQix3QkFBd0I7QUFDbkQ7QUFFRSxJQVRPO0FBQXFCLFFBQTdCLEtBQUssRUFBRTtBQUFDLHNEQUE0QjtBQUN0QyxJQUFVO0FBRU4sUUFGRixLQUFLLEVBQUU7QUFBQyxrREFBYztJQUZaLGVBQWUsZ0NBSjNCLFNBQVMsQ0FBQyxjQUNQLFFBQVEsRUFBRSxFQUFFLGNBQ1osZUFBZSxFQUFFLHVCQUF1QixDQUFDLE1BQU0sVUFDbEQsQ0FBQyxRQUNXLGVBQWUsQ0E0QjNCOzs7Ozs7Ozs7Ozs7b0JBQ0Q7QUFBQyxJQURELHNCQUFDO0FBQ0EsQ0FEQSxBQTVCRCxJQTRCQzs7QUFuQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFPQSxBQUlBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBRkEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUVBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFFQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUxBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFLQSxBQUVBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFFQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUF0QkEsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBTkEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFGQSxBQUFBLEFBSkEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQTRCQSxBQUFBLEFBQUEsQUFBQSxBQTVCQSxBQTRCQSxBQTVCQSxBQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBJbnB1dCwgT25Jbml0LCBJbmplY3RvciwgQ29tcG9uZW50RmFjdG9yeVJlc29sdmVyLCBWaWV3Q29udGFpbmVyUmVmLCBUeXBlLCBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgUHJvcHMgfSBmcm9tICcuL3R5cGVzJztcblxuQENvbXBvbmVudCh7XG4gICAgdGVtcGxhdGU6ICcnLFxuICAgIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoXG59KVxuZXhwb3J0IGNsYXNzIEN1c3RvbUNvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCB7XG4gIEBJbnB1dCgpIGNvbXBvbmVudCE6IFR5cGU8Q29tcG9uZW50PjtcbiAgQElucHV0KCkgcHJvcHMhOiBQcm9wcztcblxuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIHZjcjogVmlld0NvbnRhaW5lclJlZixcbiAgICBwcml2YXRlIGluamVjdG9yOiBJbmplY3RvcixcbiAgICBwcml2YXRlIGZhY3RvcnlSZXNvbHZlcjogQ29tcG9uZW50RmFjdG9yeVJlc29sdmVyXG4gICkge31cblxuICBuZ09uSW5pdCgpIHtcbiAgICBjb25zdCBmYWN0b3J5ID0gdGhpcy5mYWN0b3J5UmVzb2x2ZXIucmVzb2x2ZUNvbXBvbmVudEZhY3RvcnkodGhpcy5jb21wb25lbnQpO1xuICAgIGNvbnN0IGNvbXBvbmVudFJlZiA9IGZhY3RvcnkuY3JlYXRlKHRoaXMuaW5qZWN0b3IpO1xuICAgIGNvbnN0IHsgcHJvcHMgfSA9IHRoaXM7XG5cbiAgICBmb3IobGV0IGtleSBpbiBwcm9wcykge1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGNvbXBvbmVudFJlZi5pbnN0YW5jZSwga2V5LCB7XG4gICAgICAgIGdldCgpIHsgcmV0dXJuIHByb3BzW2tleV07IH0sXG4gICAgICAgIHNldCh2YWwpIHsgcHJvcHNba2V5XSA9IHZhbDsgfVxuICAgICAgfSlcbiAgICB9XG5cbiAgICB0aGlzLnZjci5pbnNlcnQoY29tcG9uZW50UmVmLmhvc3RWaWV3KTtcbiAgfVxuXG4gIG5nT25EZXN0cm95KCkge1xuICAgIHRoaXMudmNyLmRldGFjaCgwKTtcbiAgfVxufVxuIl19
import * as tslib_1 from "tslib";
import { Component, Input, OnInit, Injector, ComponentFactoryResolver, ViewContainerRef, Type, ChangeDetectionStrategy } from '@angular/core';
var CustomComponent = /** @class */ (function () {
    function CustomComponent(vcr, injector, factoryResolver) {
        this.vcr = vcr;
        this.injector = injector;
        this.factoryResolver = factoryResolver;
    }
    CustomComponent.prototype.ngOnInit = function () {
        var factory = this.factoryResolver.resolveComponentFactory(this.component);
        var componentRef = factory.create(this.injector);
        var props = this.props;
        var _loop_1 = function (key) {
            Object.defineProperty(componentRef.instance, key, {
                get: function () { return props[key]; },
                set: function (val) { props[key] = val; }
            });
        };
        for (var key in props) {
            _loop_1(key);
        }
        this.vcr.insert(componentRef.hostView);
    };
    CustomComponent.prototype.ngOnDestroy = function () {
        this.vcr.detach(0);
    };
    CustomComponent.ctorParameters = function () { return [
        { type: ViewContainerRef },
        { type: Injector },
        { type: ComponentFactoryResolver }
    ]; };
    tslib_1.__decorate([
        Input()
    ], CustomComponent.prototype, "component", void 0);
    tslib_1.__decorate([
        Input()
    ], CustomComponent.prototype, "props", void 0);
    CustomComponent = tslib_1.__decorate([
        Component({
            template: '',
            changeDetection: ChangeDetectionStrategy.OnPush
        })
    ], CustomComponent);
    return CustomComponent;
}());
export { CustomComponent };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3VzdG9tLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL3JldGUtYW5ndWxhci1yZW5kZXItcGx1Z2luLyIsInNvdXJjZXMiOlsiY3VzdG9tLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFFLFFBQVEsRUFBRSx3QkFBd0IsRUFBRSxnQkFBZ0IsRUFBRSxJQUFJLEVBQUUsdUJBQXVCLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFPOUk7SUFJRSx5QkFDVSxHQUFxQixFQUNyQixRQUFrQixFQUNsQixlQUF5QztRQUZ6QyxRQUFHLEdBQUgsR0FBRyxDQUFrQjtRQUNyQixhQUFRLEdBQVIsUUFBUSxDQUFVO1FBQ2xCLG9CQUFlLEdBQWYsZUFBZSxDQUEwQjtJQUNoRCxDQUFDO0lBRUosa0NBQVEsR0FBUjtRQUNFLElBQU0sT0FBTyxHQUFHLElBQUksQ0FBQyxlQUFlLENBQUMsdUJBQXVCLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBQzdFLElBQU0sWUFBWSxHQUFHLE9BQU8sQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQzNDLElBQUEsa0JBQUssQ0FBVTtnQ0FFZixHQUFHO1lBQ1QsTUFBTSxDQUFDLGNBQWMsQ0FBQyxZQUFZLENBQUMsUUFBUSxFQUFFLEdBQUcsRUFBRTtnQkFDaEQsR0FBRyxnQkFBSyxPQUFPLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQzVCLEdBQUcsWUFBQyxHQUFHLElBQUksS0FBSyxDQUFDLEdBQUcsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUM7YUFDL0IsQ0FBQyxDQUFBO1FBQ0osQ0FBQztRQUxELEtBQUksSUFBSSxHQUFHLElBQUksS0FBSztvQkFBWixHQUFHO1NBS1Y7UUFFRCxJQUFJLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxZQUFZLENBQUMsUUFBUSxDQUFDLENBQUM7SUFDekMsQ0FBQztJQUVELHFDQUFXLEdBQVg7UUFDRSxJQUFJLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNyQixDQUFDOztnQkF0QmMsZ0JBQWdCO2dCQUNYLFFBQVE7Z0JBQ0Qsd0JBQXdCOztJQU4xQztRQUFSLEtBQUssRUFBRTtzREFBNkI7SUFDNUI7UUFBUixLQUFLLEVBQUU7a0RBQWU7SUFGWixlQUFlO1FBSjNCLFNBQVMsQ0FBQztZQUNQLFFBQVEsRUFBRSxFQUFFO1lBQ1osZUFBZSxFQUFFLHVCQUF1QixDQUFDLE1BQU07U0FDbEQsQ0FBQztPQUNXLGVBQWUsQ0E0QjNCO0lBQUQsc0JBQUM7Q0FBQSxBQTVCRCxJQTRCQztTQTVCWSxlQUFlIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBJbnB1dCwgT25Jbml0LCBJbmplY3RvciwgQ29tcG9uZW50RmFjdG9yeVJlc29sdmVyLCBWaWV3Q29udGFpbmVyUmVmLCBUeXBlLCBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgUHJvcHMgfSBmcm9tICcuL3R5cGVzJztcblxuQENvbXBvbmVudCh7XG4gICAgdGVtcGxhdGU6ICcnLFxuICAgIGNoYW5nZURldGVjdGlvbjogQ2hhbmdlRGV0ZWN0aW9uU3RyYXRlZ3kuT25QdXNoXG59KVxuZXhwb3J0IGNsYXNzIEN1c3RvbUNvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCB7XG4gIEBJbnB1dCgpIGNvbXBvbmVudCE6IFR5cGU8Q29tcG9uZW50PjtcbiAgQElucHV0KCkgcHJvcHMhOiBQcm9wcztcblxuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIHZjcjogVmlld0NvbnRhaW5lclJlZixcbiAgICBwcml2YXRlIGluamVjdG9yOiBJbmplY3RvcixcbiAgICBwcml2YXRlIGZhY3RvcnlSZXNvbHZlcjogQ29tcG9uZW50RmFjdG9yeVJlc29sdmVyXG4gICkge31cblxuICBuZ09uSW5pdCgpIHtcbiAgICBjb25zdCBmYWN0b3J5ID0gdGhpcy5mYWN0b3J5UmVzb2x2ZXIucmVzb2x2ZUNvbXBvbmVudEZhY3RvcnkodGhpcy5jb21wb25lbnQpO1xuICAgIGNvbnN0IGNvbXBvbmVudFJlZiA9IGZhY3RvcnkuY3JlYXRlKHRoaXMuaW5qZWN0b3IpO1xuICAgIGNvbnN0IHsgcHJvcHMgfSA9IHRoaXM7XG5cbiAgICBmb3IobGV0IGtleSBpbiBwcm9wcykge1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGNvbXBvbmVudFJlZi5pbnN0YW5jZSwga2V5LCB7XG4gICAgICAgIGdldCgpIHsgcmV0dXJuIHByb3BzW2tleV07IH0sXG4gICAgICAgIHNldCh2YWwpIHsgcHJvcHNba2V5XSA9IHZhbDsgfVxuICAgICAgfSlcbiAgICB9XG5cbiAgICB0aGlzLnZjci5pbnNlcnQoY29tcG9uZW50UmVmLmhvc3RWaWV3KTtcbiAgfVxuXG4gIG5nT25EZXN0cm95KCkge1xuICAgIHRoaXMudmNyLmRldGFjaCgwKTtcbiAgfVxufVxuIl19
import { NodeComponent } from './node/node.component';
function install(editor, params) {
    if (params === void 0) { params = {}; }
    editor.on('rendernode', function (_a) {
        var el = _a.el, node = _a.node, component = _a.component, bindControl = _a.bindControl, bindSocket = _a.bindSocket;
        var ngComponent = component;
        if (ngComponent.render && ngComponent.render !== 'angular')
            return;
        var element = document.createElement('rete-element');
        var props = element;
        props.component = ngComponent.component || params.component || NodeComponent;
        props.props = Object.assign({}, ngComponent.props || {}, {
            node: node,
            editor: editor,
            bindControl: bindControl,
            bindSocket: bindSocket
        });
        el.appendChild(element);
    });
    editor.on('rendercontrol', function (_a) {
        var el = _a.el, control = _a.control;
        var ngControl = control;
        if (ngControl.render && ngControl.render !== 'angular')
            return;
        var element = document.createElement('rete-element');
        var props = element;
        props.component = ngControl.component;
        props.props = ngControl.props;
        el.appendChild(element);
    });
    editor.on(['connectioncreated', 'connectionremoved'], function (connection) {
        connection.output.node.update();
        connection.input.node.update();
    });
    editor.on('nodeselected', function () {
        editor.nodes.forEach(function (n) { return n.update(); });
    });
}
export var AngularRenderPlugin = {
    name: 'angular-render',
    install: install
};
export { ReteModule } from './module';
export { NodeService } from './node.service';
export { NodeComponent } from './node/node.component';
export { SocketComponent } from './socket/socket.component';
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290Ijoibmc6Ly9yZXRlLWFuZ3VsYXItcmVuZGVyLXBsdWdpbi8iLCJzb3VyY2VzIjpbImluZGV4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUdBLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUV0RCxTQUFTLE9BQU8sQ0FBQyxNQUFrQixFQUFFLE1BQXVDO0lBQXZDLHVCQUFBLEVBQUEsV0FBdUM7SUFDeEUsTUFBTSxDQUFDLEVBQUUsQ0FBQyxZQUFZLEVBQUUsVUFBQyxFQUFnRDtZQUE5QyxVQUFFLEVBQUUsY0FBSSxFQUFFLHdCQUFTLEVBQUUsNEJBQVcsRUFBRSwwQkFBVTtRQUNuRSxJQUFNLFdBQVcsR0FBRyxTQUE0QyxDQUFDO1FBRWpFLElBQUksV0FBVyxDQUFDLE1BQU0sSUFBSSxXQUFXLENBQUMsTUFBTSxLQUFLLFNBQVM7WUFBRSxPQUFPO1FBRW5FLElBQU0sT0FBTyxHQUFHLFFBQVEsQ0FBQyxhQUFhLENBQUMsY0FBYyxDQUFDLENBQUM7UUFDdkQsSUFBTSxLQUFLLEdBQWlCLE9BQWMsQ0FBQztRQUUzQyxLQUFLLENBQUMsU0FBUyxHQUFHLFdBQVcsQ0FBQyxTQUFTLElBQUksTUFBTSxDQUFDLFNBQVMsSUFBSSxhQUFhLENBQUM7UUFDN0UsS0FBSyxDQUFDLEtBQUssR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLEVBQUUsRUFBRSxXQUFXLENBQUMsS0FBSyxJQUFJLEVBQUUsRUFBRTtZQUNyRCxJQUFJLE1BQUE7WUFDSixNQUFNLFFBQUE7WUFDTixXQUFXLGFBQUE7WUFDWCxVQUFVLFlBQUE7U0FDYixDQUFDLENBQUM7UUFFSCxFQUFFLENBQUMsV0FBVyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQzVCLENBQUMsQ0FBQyxDQUFDO0lBRUgsTUFBTSxDQUFDLEVBQUUsQ0FBQyxlQUFlLEVBQUUsVUFBQyxFQUFlO1lBQWIsVUFBRSxFQUFFLG9CQUFPO1FBQ3JDLElBQU0sU0FBUyxHQUFHLE9BQW9DLENBQUM7UUFFdkQsSUFBSSxTQUFTLENBQUMsTUFBTSxJQUFJLFNBQVMsQ0FBQyxNQUFNLEtBQUssU0FBUztZQUFFLE9BQU87UUFFL0QsSUFBTSxPQUFPLEdBQUcsUUFBUSxDQUFDLGFBQWEsQ0FBQyxjQUFjLENBQUMsQ0FBQztRQUN2RCxJQUFNLEtBQUssR0FBaUIsT0FBYyxDQUFDO1FBRTNDLEtBQUssQ0FBQyxTQUFTLEdBQUcsU0FBUyxDQUFDLFNBQVMsQ0FBQztRQUN0QyxLQUFLLENBQUMsS0FBSyxHQUFHLFNBQVMsQ0FBQyxLQUFLLENBQUM7UUFFOUIsRUFBRSxDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUM1QixDQUFDLENBQUMsQ0FBQztJQUNILE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQyxtQkFBbUIsRUFBRSxtQkFBbUIsQ0FBQyxFQUFFLFVBQUEsVUFBVTtRQUM1RCxVQUFVLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQztRQUNoQyxVQUFVLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQztJQUNuQyxDQUFDLENBQUMsQ0FBQztJQUNILE1BQU0sQ0FBQyxFQUFFLENBQUMsY0FBYyxFQUFFO1FBQ3RCLE1BQU0sQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLFVBQUEsQ0FBQyxJQUFJLE9BQUEsQ0FBQyxDQUFDLE1BQU0sRUFBRSxFQUFWLENBQVUsQ0FBQyxDQUFDO0lBQzFDLENBQUMsQ0FBQyxDQUFDO0FBQ1AsQ0FBQztBQUVELE1BQU0sQ0FBQyxJQUFNLG1CQUFtQixHQUFHO0lBQy9CLElBQUksRUFBRSxnQkFBZ0I7SUFDdEIsT0FBTyxTQUFBO0NBQ1YsQ0FBQztBQUNGLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxVQUFVLENBQUM7QUFFdEMsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQzdDLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUN0RCxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sMkJBQTJCLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBUeXBlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBOb2RlRWRpdG9yIH0gZnJvbSAncmV0ZSc7XG5pbXBvcnQgeyBBbmd1bGFyQ29udHJvbCwgRWxlbWVudFByb3BzLCBBbmd1bGFyQ29tcG9uZW50RGF0YSB9IGZyb20gJy4vdHlwZXMnO1xuaW1wb3J0IHsgTm9kZUNvbXBvbmVudCB9IGZyb20gJy4vbm9kZS9ub2RlLmNvbXBvbmVudCc7XG5cbmZ1bmN0aW9uIGluc3RhbGwoZWRpdG9yOiBOb2RlRWRpdG9yLCBwYXJhbXMgOiB7IGNvbXBvbmVudD86IFR5cGU8YW55PiB9ID0ge30pIHtcbiAgICBlZGl0b3Iub24oJ3JlbmRlcm5vZGUnLCAoeyBlbCwgbm9kZSwgY29tcG9uZW50LCBiaW5kQ29udHJvbCwgYmluZFNvY2tldCB9KSA9PiB7XG4gICAgICAgIGNvbnN0IG5nQ29tcG9uZW50ID0gY29tcG9uZW50IGFzIHVua25vd24gYXMgQW5ndWxhckNvbXBvbmVudERhdGE7XG5cbiAgICAgICAgaWYgKG5nQ29tcG9uZW50LnJlbmRlciAmJiBuZ0NvbXBvbmVudC5yZW5kZXIgIT09ICdhbmd1bGFyJykgcmV0dXJuO1xuXG4gICAgICAgIGNvbnN0IGVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdyZXRlLWVsZW1lbnQnKTtcbiAgICAgICAgY29uc3QgcHJvcHM6IEVsZW1lbnRQcm9wcyA9IGVsZW1lbnQgYXMgYW55O1xuXG4gICAgICAgIHByb3BzLmNvbXBvbmVudCA9IG5nQ29tcG9uZW50LmNvbXBvbmVudCB8fCBwYXJhbXMuY29tcG9uZW50IHx8IE5vZGVDb21wb25lbnQ7XG4gICAgICAgIHByb3BzLnByb3BzID0gT2JqZWN0LmFzc2lnbih7fSwgbmdDb21wb25lbnQucHJvcHMgfHwge30sIHtcbiAgICAgICAgICAgIG5vZGUsXG4gICAgICAgICAgICBlZGl0b3IsXG4gICAgICAgICAgICBiaW5kQ29udHJvbCxcbiAgICAgICAgICAgIGJpbmRTb2NrZXRcbiAgICAgICAgfSk7XG5cbiAgICAgICAgZWwuYXBwZW5kQ2hpbGQoZWxlbWVudCk7XG4gICAgfSk7XG5cbiAgICBlZGl0b3Iub24oJ3JlbmRlcmNvbnRyb2wnLCAoeyBlbCwgY29udHJvbCB9KSA9PiB7XG4gICAgICAgIGNvbnN0IG5nQ29udHJvbCA9IGNvbnRyb2wgYXMgdW5rbm93biBhcyBBbmd1bGFyQ29udHJvbDtcblxuICAgICAgICBpZiAobmdDb250cm9sLnJlbmRlciAmJiBuZ0NvbnRyb2wucmVuZGVyICE9PSAnYW5ndWxhcicpIHJldHVybjtcblxuICAgICAgICBjb25zdCBlbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgncmV0ZS1lbGVtZW50Jyk7XG4gICAgICAgIGNvbnN0IHByb3BzOiBFbGVtZW50UHJvcHMgPSBlbGVtZW50IGFzIGFueTtcblxuICAgICAgICBwcm9wcy5jb21wb25lbnQgPSBuZ0NvbnRyb2wuY29tcG9uZW50O1xuICAgICAgICBwcm9wcy5wcm9wcyA9IG5nQ29udHJvbC5wcm9wcztcblxuICAgICAgICBlbC5hcHBlbmRDaGlsZChlbGVtZW50KTtcbiAgICB9KTtcbiAgICBlZGl0b3Iub24oWydjb25uZWN0aW9uY3JlYXRlZCcsICdjb25uZWN0aW9ucmVtb3ZlZCddLCBjb25uZWN0aW9uID0+IHtcbiAgICAgICAgY29ubmVjdGlvbi5vdXRwdXQubm9kZS51cGRhdGUoKTtcbiAgICAgICAgY29ubmVjdGlvbi5pbnB1dC5ub2RlLnVwZGF0ZSgpO1xuICAgIH0pO1xuICAgIGVkaXRvci5vbignbm9kZXNlbGVjdGVkJywgKCkgPT4ge1xuICAgICAgICBlZGl0b3Iubm9kZXMuZm9yRWFjaChuID0+IG4udXBkYXRlKCkpO1xuICAgIH0pO1xufVxuXG5leHBvcnQgY29uc3QgQW5ndWxhclJlbmRlclBsdWdpbiA9IHtcbiAgICBuYW1lOiAnYW5ndWxhci1yZW5kZXInLFxuICAgIGluc3RhbGxcbn07XG5leHBvcnQgeyBSZXRlTW9kdWxlIH0gZnJvbSAnLi9tb2R1bGUnO1xuZXhwb3J0ICogZnJvbSAnLi90eXBlcyc7XG5leHBvcnQgeyBOb2RlU2VydmljZSB9IGZyb20gJy4vbm9kZS5zZXJ2aWNlJztcbmV4cG9ydCB7IE5vZGVDb21wb25lbnQgfSBmcm9tICcuL25vZGUvbm9kZS5jb21wb25lbnQnO1xuZXhwb3J0IHsgU29ja2V0Q29tcG9uZW50IH0gZnJvbSAnLi9zb2NrZXQvc29ja2V0LmNvbXBvbmVudCc7XG4iXX0=
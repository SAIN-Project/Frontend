import * as tslib_1 from "tslib";
import { Directive, Input, ElementRef, OnInit } from '@angular/core';
import { Input as ReteInput } from 'rete';
import { NodeService } from './node.service';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from './node.service';
var SocketDirective = /** @class */ (function () {
    function SocketDirective(el, service) {
        this.el = el;
        this.service = service;
    }
    Object.defineProperty(SocketDirective.prototype, "type", {
        get: function () {
            return this.io instanceof ReteInput ? 'input' : 'output';
        },
        enumerable: true,
        configurable: true
    });
    SocketDirective.prototype.ngOnInit = function () {
        this.service.bindSocket(this.el.nativeElement, this.type, this.io);
    };
    SocketDirective.ctorParameters = function () { return [
        { type: ElementRef },
        { type: NodeService }
    ]; };
    tslib_1.__decorate([
        Input()
    ], SocketDirective.prototype, "io", void 0);
SocketDirective.ɵfac = function SocketDirective_Factory(t) { return new (t || SocketDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.NodeService)); };
SocketDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: SocketDirective, selectors: [["", "rete-socket", ""]], inputs: { io: "io" } });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(SocketDirective, [{
        type: Directive,
        args: [{
                selector: '[rete-socket]'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc1.NodeService }]; }, { io: [{
            type: Input
        }] }); })();
    return SocketDirective;
}());
export { SocketDirective };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic29ja2V0LmRpcmVjdGl2ZS5qcyIsInNvdXJjZXMiOlsicmV0ZS1hbmd1bGFyLXJlbmRlci1wbHVnaW4vc29ja2V0LmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQUUsVUFBVSxFQUFFLE1BQU0sRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNyRSxPQUFPLEVBQU0sS0FBSyxJQUFJLFNBQVMsRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUM5QyxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7OztBQU03QztBQUNFLElBRUUseUJBQW9CLEVBQWMsRUFBVSxPQUFvQjtBQUFJLFFBQWhELE9BQUUsR0FBRixFQUFFLENBQVk7QUFBQyxRQUFTLFlBQU8sR0FBUCxPQUFPLENBQWE7QUFBQyxJQUFFLENBQUM7QUFDeEUsSUFDSSxzQkFBSSxpQ0FBSTtBQUFJLGFBQVo7QUFBYyxZQUNaLE9BQU8sSUFBSSxDQUFDLEVBQUUsWUFBWSxTQUFTLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDO0FBQy9ELFFBQUksQ0FBQztBQUNKO0FBRU07QUFBMkIsT0FIN0I7QUFDTCxJQUNJLGtDQUFRLEdBQVI7QUFDSCxRQUFLLElBQUksQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsYUFBYSxFQUFFLElBQUksQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0FBQ3pFLElBQUksQ0FBQztBQUNKO0FBQzBELGdCQVYvQixVQUFVO0FBQUksZ0JBQWUsV0FBVztBQUFHO0FBRWxFLElBSlE7QUFFSixRQUZKLEtBQUssRUFBRTtBQUFDLCtDQUFRO0lBRFIsZUFBZSxnQ0FIM0IsU0FBUyxDQUFDLGNBQ1QsUUFBUSxFQUFFLGVBQWUsVUFDMUIsQ0FBQyxRQUNXLGVBQWUsQ0FZM0I7Ozs7Ozs7OztvQkFDRDtBQUFDLElBREQsc0JBQUM7QUFDQSxDQURBLEFBWkQsSUFZQzs7QUFwQkEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQU1BLEFBR0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUVBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFFQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFSQSxBQUFBLEFBQUEsQUFBQSxBQUZBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFEQSxBQUFBLEFBSEEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQVlBLEFBQUEsQUFBQSxBQUFBLEFBWkEsQUFZQSxBQVpBLEFBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEaXJlY3RpdmUsIElucHV0LCBFbGVtZW50UmVmLCBPbkluaXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IElPLCBJbnB1dCBhcyBSZXRlSW5wdXQgfSBmcm9tICdyZXRlJztcbmltcG9ydCB7IE5vZGVTZXJ2aWNlIH0gZnJvbSAnLi9ub2RlLnNlcnZpY2UnO1xuaW1wb3J0IHsgU29ja2V0VHlwZSB9IGZyb20gJy4vdHlwZXMnO1xuXG5ARGlyZWN0aXZlKHtcbiAgc2VsZWN0b3I6ICdbcmV0ZS1zb2NrZXRdJ1xufSlcbmV4cG9ydCBjbGFzcyBTb2NrZXREaXJlY3RpdmUgaW1wbGVtZW50cyBPbkluaXQge1xuICAgIEBJbnB1dCgpIGlvITogSU87XG4gIFxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgZWw6IEVsZW1lbnRSZWYsIHByaXZhdGUgc2VydmljZTogTm9kZVNlcnZpY2UpIHt9XG4gIFxuICAgIGdldCB0eXBlKCk6IFNvY2tldFR5cGUge1xuICAgICAgcmV0dXJuIHRoaXMuaW8gaW5zdGFuY2VvZiBSZXRlSW5wdXQgPyAnaW5wdXQnIDogJ291dHB1dCc7XG4gICAgfVxuICBcbiAgICBuZ09uSW5pdCgpIHtcbiAgICAgIHRoaXMuc2VydmljZS5iaW5kU29ja2V0KHRoaXMuZWwubmF0aXZlRWxlbWVudCwgdGhpcy50eXBlLCB0aGlzLmlvKTtcbiAgICB9XG59XG4iXX0=
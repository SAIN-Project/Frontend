import { __decorate } from 'tslib';
import { Injectable, ChangeDetectorRef, Input, Component, ChangeDetectionStrategy, Pipe, ElementRef, Directive, ViewContainerRef, Injector, ComponentFactoryResolver, NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { createCustomElement } from '@angular/elements';
import { Input as Input$1 } from 'rete';

import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from '@angular/common';

function NodeComponent_div_4_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 5);
    ɵngcc0.ɵɵelementStart(1, "div", 6);
    ɵngcc0.ɵɵtext(2);
    ɵngcc0.ɵɵelementEnd();
    ɵngcc0.ɵɵelement(3, "rete-socket", 7);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var output_r3 = ctx.$implicit;
    ɵngcc0.ɵɵadvance(2);
    ɵngcc0.ɵɵtextInterpolate(output_r3.name);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("io", output_r3)("socket", output_r3.socket);
} }
function NodeComponent_div_5_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "div", 8);
} if (rf & 2) {
    var control_r4 = ctx.$implicit;
    ɵngcc0.ɵɵproperty("rete-control", control_r4);
} }
function NodeComponent_div_6_div_2_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 12);
    ɵngcc0.ɵɵtext(1);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var input_r5 = ɵngcc0.ɵɵnextContext().$implicit;
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵtextInterpolate(input_r5.name);
} }
function NodeComponent_div_6_div_3_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "div", 13);
} if (rf & 2) {
    var input_r5 = ɵngcc0.ɵɵnextContext().$implicit;
    ɵngcc0.ɵɵproperty("rete-control", input_r5.control);
} }
function NodeComponent_div_6_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelementStart(0, "div", 9);
    ɵngcc0.ɵɵelement(1, "rete-socket", 7);
    ɵngcc0.ɵɵtemplate(2, NodeComponent_div_6_div_2_Template, 2, 1, "div", 10);
    ɵngcc0.ɵɵtemplate(3, NodeComponent_div_6_div_3_Template, 1, 1, "div", 11);
    ɵngcc0.ɵɵelementEnd();
} if (rf & 2) {
    var input_r5 = ctx.$implicit;
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("io", input_r5)("socket", input_r5.socket);
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", !input_r5.showControl());
    ɵngcc0.ɵɵadvance(1);
    ɵngcc0.ɵɵproperty("ngIf", input_r5.showControl());
} }
var _c0 = function (a0, a1) { return [a0, a1]; };
function SocketComponent_div_0_Template(rf, ctx) { if (rf & 1) {
    ɵngcc0.ɵɵelement(0, "div", 1);
} if (rf & 2) {
    var ctx_r0 = ɵngcc0.ɵɵnextContext();
    ɵngcc0.ɵɵproperty("ngClass", ɵngcc0.ɵɵpureFunction2(2, _c0, ctx_r0.type, ctx_r0.socket.name))("title", ctx_r0.socket.name);
} }
var NodeService = /** @class */ (function () {
    function NodeService() {
    }
    NodeService.prototype.setBindings = function (bindSocket, bindControl) {
        this.bindSocket = bindSocket;
        this.bindControl = bindControl;
    };
NodeService.ɵfac = function NodeService_Factory(t) { return new (t || NodeService)(); };
NodeService.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: NodeService, factory: function (t) { return NodeService.ɵfac(t); } });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NodeService, [{
        type: Injectable
    }], function () { return []; }, null); })();
    return NodeService;
}());

var NodeComponent = /** @class */ (function () {
    function NodeComponent(service, cdr) {
        this.service = service;
        this.cdr = cdr;
    }
    NodeComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.service.setBindings(this.bindSocket, this.bindControl);
        this.node.update = function () { return _this.cdr.detectChanges(); };
    };
    Object.defineProperty(NodeComponent.prototype, "inputs", {
        get: function () {
            return Array.from(this.node.inputs.values());
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NodeComponent.prototype, "outputs", {
        get: function () {
            return Array.from(this.node.outputs.values());
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NodeComponent.prototype, "controls", {
        get: function () {
            return Array.from(this.node.controls.values());
        },
        enumerable: true,
        configurable: true
    });
    NodeComponent.prototype.selected = function () {
        return this.editor.selected.contains(this.node) ? 'selected' : '';
    };
    NodeComponent.ctorParameters = function () { return [
        { type: NodeService },
        { type: ChangeDetectorRef }
    ]; };
    __decorate([
        Input()
    ], NodeComponent.prototype, "editor", void 0);
    __decorate([
        Input()
    ], NodeComponent.prototype, "node", void 0);
    __decorate([
        Input()
    ], NodeComponent.prototype, "bindSocket", void 0);
    __decorate([
        Input()
    ], NodeComponent.prototype, "bindControl", void 0);
NodeComponent.ɵfac = function NodeComponent_Factory(t) { return new (t || NodeComponent)(ɵngcc0.ɵɵdirectiveInject(NodeService), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ChangeDetectorRef)); };
NodeComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: NodeComponent, selectors: [["ng-component"]], inputs: { editor: "editor", node: "node", bindSocket: "bindSocket", bindControl: "bindControl" }, features: [ɵngcc0.ɵɵProvidersFeature([NodeService])], decls: 7, vars: 10, consts: [[1, "node", 3, "ngClass"], [1, "title"], ["class", "output", 4, "ngFor", "ngForOf"], ["class", "control", 3, "rete-control", 4, "ngFor", "ngForOf"], ["class", "input", 4, "ngFor", "ngForOf"], [1, "output"], [1, "output-title"], ["rete-socket", "", 3, "io", "socket"], [1, "control", 3, "rete-control"], [1, "input"], ["class", "input-title", 4, "ngIf"], ["class", "input-control", 3, "rete-control", 4, "ngIf"], [1, "input-title"], [1, "input-control", 3, "rete-control"]], template: function NodeComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵelementStart(0, "div", 0);
        ɵngcc0.ɵɵpipe(1, "kebab");
        ɵngcc0.ɵɵelementStart(2, "div", 1);
        ɵngcc0.ɵɵtext(3);
        ɵngcc0.ɵɵelementEnd();
        ɵngcc0.ɵɵtemplate(4, NodeComponent_div_4_Template, 4, 3, "div", 2);
        ɵngcc0.ɵɵtemplate(5, NodeComponent_div_5_Template, 1, 1, "div", 3);
        ɵngcc0.ɵɵtemplate(6, NodeComponent_div_6_Template, 4, 4, "div", 4);
        ɵngcc0.ɵɵelementEnd();
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("ngClass", ɵngcc0.ɵɵpipeBind1(1, 5, ɵngcc0.ɵɵpureFunction2(7, _c0, ctx.selected(), ctx.node.name)));
        ɵngcc0.ɵɵadvance(3);
        ɵngcc0.ɵɵtextInterpolate(ctx.node.name);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngForOf", ctx.outputs);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngForOf", ctx.controls);
        ɵngcc0.ɵɵadvance(1);
        ɵngcc0.ɵɵproperty("ngForOf", ctx.inputs);
    } }, directives: function () { return [ɵngcc1.NgClass, ɵngcc1.NgForOf, SocketComponent, SocketDirective, ControlDirective, ɵngcc1.NgIf]; }, pipes: function () { return [KebabPipe]; }, styles: [".node[_ngcontent-%COMP%]{background:rgba(110,136,255,.8);border:2px solid #4e58bf;border-radius:10px;cursor:pointer;min-width:180px;height:auto;padding-bottom:6px;box-sizing:content-box;position:relative;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.node[_ngcontent-%COMP%]:hover{background:rgba(130,153,255,.8)}.node.selected[_ngcontent-%COMP%]{background:#ffd92c;border-color:#e3c000}.node[_ngcontent-%COMP%]   .title[_ngcontent-%COMP%]{color:#fff;font-family:sans-serif;font-size:18px;padding:8px}.node[_ngcontent-%COMP%]   .output[_ngcontent-%COMP%]{text-align:right}.node[_ngcontent-%COMP%]   .input[_ngcontent-%COMP%]{text-align:left}.node[_ngcontent-%COMP%]   .input-title[_ngcontent-%COMP%], .node[_ngcontent-%COMP%]   .output-title[_ngcontent-%COMP%]{vertical-align:middle;color:#fff;display:inline-block;font-family:sans-serif;font-size:14px;margin:6px;line-height:24px}.node[_ngcontent-%COMP%]   .input-title[hidden][_ngcontent-%COMP%], .node[_ngcontent-%COMP%]   .output-title[hidden][_ngcontent-%COMP%]{display:none}.node[_ngcontent-%COMP%]   .input-control[_ngcontent-%COMP%]{z-index:1;width:calc(100% - 36px);vertical-align:middle;display:inline-block}.node[_ngcontent-%COMP%]   .control[_ngcontent-%COMP%]{padding:6px 18px}"], changeDetection: 0 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(NodeComponent, [{
        type: Component,
        args: [{
                template: "<div class=\"node\" [ngClass]=\"[selected(), node.name] | kebab\">\n    <div class=\"title\">{{node.name}}</div>\n    <div class=\"output\" *ngFor=\"let output of outputs\">\n        <div class=\"output-title\">{{output.name}}</div>\n        <rete-socket rete-socket [io]=\"output\" [socket]=\"output.socket\"></rete-socket>\n    </div>\n    <div class=\"control\" *ngFor=\"let control of controls\" [rete-control]=\"control\"></div>\n    <div class=\"input\" *ngFor=\"let input of inputs\">\n        <rete-socket rete-socket [io]=\"input\" [socket]=\"input.socket\"></rete-socket>\n        <div class=\"input-title\" *ngIf=\"!input.showControl()\">{{input.name}}</div>\n        <div class=\"input-control\" *ngIf=\"input.showControl()\" [rete-control]=\"input.control\"></div>\n    </div>\n</div>",
                providers: [NodeService],
                changeDetection: ChangeDetectionStrategy.OnPush,
                styles: [".node{background:rgba(110,136,255,.8);border:2px solid #4e58bf;border-radius:10px;cursor:pointer;min-width:180px;height:auto;padding-bottom:6px;box-sizing:content-box;position:relative;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.node:hover{background:rgba(130,153,255,.8)}.node.selected{background:#ffd92c;border-color:#e3c000}.node .title{color:#fff;font-family:sans-serif;font-size:18px;padding:8px}.node .output{text-align:right}.node .input{text-align:left}.node .input-title,.node .output-title{vertical-align:middle;color:#fff;display:inline-block;font-family:sans-serif;font-size:14px;margin:6px;line-height:24px}.node .input-title[hidden],.node .output-title[hidden]{display:none}.node .input-control{z-index:1;width:calc(100% - 36px);vertical-align:middle;display:inline-block}.node .control{padding:6px 18px}"]
            }]
    }], function () { return [{ type: NodeService }, { type: ɵngcc0.ChangeDetectorRef }]; }, { editor: [{
            type: Input
        }], node: [{
            type: Input
        }], bindSocket: [{
            type: Input
        }], bindControl: [{
            type: Input
        }] }); })();
    return NodeComponent;
}());

var KebabPipe = /** @class */ (function () {
    function KebabPipe() {
    }
    KebabPipe.prototype.replace = function (s) {
        return s.toLowerCase().replace(/ /g, '-');
    };
    KebabPipe.prototype.transform = function (value) {
        var _this = this;
        return Array.isArray(value) ? value.map(function (s) { return _this.replace(s); }) : this.replace(value);
    };
KebabPipe.ɵfac = function KebabPipe_Factory(t) { return new (t || KebabPipe)(); };
KebabPipe.ɵpipe = ɵngcc0.ɵɵdefinePipe({ name: "kebab", type: KebabPipe, pure: true });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(KebabPipe, [{
        type: Pipe,
        args: [{ name: 'kebab' }]
    }], function () { return []; }, null); })();
    return KebabPipe;
}());

var SocketComponent = /** @class */ (function () {
    function SocketComponent() {
    }
    Object.defineProperty(SocketComponent.prototype, "type", {
        get: function () {
            return this.io instanceof Input$1 ? 'input' : 'output';
        },
        enumerable: true,
        configurable: true
    });
    __decorate([
        Input()
    ], SocketComponent.prototype, "socket", void 0);
    __decorate([
        Input()
    ], SocketComponent.prototype, "io", void 0);
SocketComponent.ɵfac = function SocketComponent_Factory(t) { return new (t || SocketComponent)(); };
SocketComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: SocketComponent, selectors: [["rete-socket"]], inputs: { socket: "socket", io: "io" }, decls: 1, vars: 1, consts: [["class", "socket", 3, "ngClass", "title", 4, "ngIf"], [1, "socket", 3, "ngClass", "title"]], template: function SocketComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵtemplate(0, SocketComponent_div_0_Template, 1, 5, "div", 0);
    } if (rf & 2) {
        ɵngcc0.ɵɵproperty("ngIf", ctx.socket);
    } }, directives: [ɵngcc1.NgIf, ɵngcc1.NgClass], styles: ["[_nghost-%COMP%]{display:inline-block}.socket[_ngcontent-%COMP%]{display:inline-block;cursor:pointer;border:1px solid #fff;border-radius:12px;width:24px;height:24px;margin:6px;vertical-align:middle;background:#96b38a;z-index:2;box-sizing:border-box}.socket[_ngcontent-%COMP%]:hover{border-width:4px}.socket.multiple[_ngcontent-%COMP%]{border-color:#ff0}.socket.output[_ngcontent-%COMP%]{margin-right:-12px}.socket.input[_ngcontent-%COMP%]{margin-left:-12px}"], changeDetection: 0 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(SocketComponent, [{
        type: Component,
        args: [{
                selector: 'rete-socket',
                template: "<div *ngIf=\"socket\" class=\"socket\" [ngClass]=\"[type, socket.name]\" [title]=\"socket.name\"></div>",
                changeDetection: ChangeDetectionStrategy.OnPush,
                styles: [":host{display:inline-block}.socket{display:inline-block;cursor:pointer;border:1px solid #fff;border-radius:12px;width:24px;height:24px;margin:6px;vertical-align:middle;background:#96b38a;z-index:2;box-sizing:border-box}.socket:hover{border-width:4px}.socket.multiple{border-color:#ff0}.socket.output{margin-right:-12px}.socket.input{margin-left:-12px}"]
            }]
    }], function () { return []; }, { socket: [{
            type: Input
        }], io: [{
            type: Input
        }] }); })();
    return SocketComponent;
}());

var ControlDirective = /** @class */ (function () {
    function ControlDirective(el, service) {
        this.el = el;
        this.service = service;
    }
    ControlDirective.prototype.ngOnInit = function () {
        this.service.bindControl(this.el.nativeElement, this.control);
    };
    ControlDirective.ctorParameters = function () { return [
        { type: ElementRef },
        { type: NodeService }
    ]; };
    __decorate([
        Input('rete-control')
    ], ControlDirective.prototype, "control", void 0);
ControlDirective.ɵfac = function ControlDirective_Factory(t) { return new (t || ControlDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(NodeService)); };
ControlDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: ControlDirective, selectors: [["", "rete-control", ""]], inputs: { control: ["rete-control", "control"] } });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ControlDirective, [{
        type: Directive,
        args: [{
                selector: '[rete-control]'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: NodeService }]; }, { control: [{
            type: Input,
            args: ['rete-control']
        }] }); })();
    return ControlDirective;
}());

var SocketDirective = /** @class */ (function () {
    function SocketDirective(el, service) {
        this.el = el;
        this.service = service;
    }
    Object.defineProperty(SocketDirective.prototype, "type", {
        get: function () {
            return this.io instanceof Input$1 ? 'input' : 'output';
        },
        enumerable: true,
        configurable: true
    });
    SocketDirective.prototype.ngOnInit = function () {
        this.service.bindSocket(this.el.nativeElement, this.type, this.io);
    };
    SocketDirective.ctorParameters = function () { return [
        { type: ElementRef },
        { type: NodeService }
    ]; };
    __decorate([
        Input()
    ], SocketDirective.prototype, "io", void 0);
SocketDirective.ɵfac = function SocketDirective_Factory(t) { return new (t || SocketDirective)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(NodeService)); };
SocketDirective.ɵdir = ɵngcc0.ɵɵdefineDirective({ type: SocketDirective, selectors: [["", "rete-socket", ""]], inputs: { io: "io" } });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(SocketDirective, [{
        type: Directive,
        args: [{
                selector: '[rete-socket]'
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: NodeService }]; }, { io: [{
            type: Input
        }] }); })();
    return SocketDirective;
}());

var CustomComponent = /** @class */ (function () {
    function CustomComponent(vcr, injector, factoryResolver) {
        this.vcr = vcr;
        this.injector = injector;
        this.factoryResolver = factoryResolver;
    }
    CustomComponent.prototype.ngOnInit = function () {
        var factory = this.factoryResolver.resolveComponentFactory(this.component);
        var componentRef = factory.create(this.injector);
        var props = this.props;
        var _loop_1 = function (key) {
            Object.defineProperty(componentRef.instance, key, {
                get: function () { return props[key]; },
                set: function (val) { props[key] = val; }
            });
        };
        for (var key in props) {
            _loop_1(key);
        }
        this.vcr.insert(componentRef.hostView);
    };
    CustomComponent.prototype.ngOnDestroy = function () {
        this.vcr.detach(0);
    };
    CustomComponent.ctorParameters = function () { return [
        { type: ViewContainerRef },
        { type: Injector },
        { type: ComponentFactoryResolver }
    ]; };
    __decorate([
        Input()
    ], CustomComponent.prototype, "component", void 0);
    __decorate([
        Input()
    ], CustomComponent.prototype, "props", void 0);
CustomComponent.ɵfac = function CustomComponent_Factory(t) { return new (t || CustomComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Injector), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ComponentFactoryResolver)); };
CustomComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: CustomComponent, selectors: [["ng-component"]], inputs: { component: "component", props: "props" }, decls: 0, vars: 0, template: function CustomComponent_Template(rf, ctx) { }, encapsulation: 2, changeDetection: 0 });
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CustomComponent, [{
        type: Component,
        args: [{
                template: '',
                changeDetection: ChangeDetectionStrategy.OnPush
            }]
    }], function () { return [{ type: ɵngcc0.ViewContainerRef }, { type: ɵngcc0.Injector }, { type: ɵngcc0.ComponentFactoryResolver }]; }, { component: [{
            type: Input
        }], props: [{
            type: Input
        }] }); })();
    return CustomComponent;
}());

var ReteModule = /** @class */ (function () {
    function ReteModule(injector) {
        var CustomElement = createCustomElement(CustomComponent, { injector: injector });
        if (!customElements.get('rete-element'))
            customElements.define('rete-element', CustomElement);
    }
    ReteModule.ctorParameters = function () { return [
        { type: Injector }
    ]; };
ReteModule.ɵmod = ɵngcc0.ɵɵdefineNgModule({ type: ReteModule });
ReteModule.ɵinj = ɵngcc0.ɵɵdefineInjector({ factory: function ReteModule_Factory(t) { return new (t || ReteModule)(ɵngcc0.ɵɵinject(ɵngcc0.Injector)); }, providers: [
        KebabPipe,
        ControlDirective
    ], imports: [[
            CommonModule
        ]] });
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(ReteModule, { declarations: function () { return [NodeComponent, SocketComponent, CustomComponent, ControlDirective, SocketDirective, KebabPipe]; }, imports: function () { return [CommonModule]; }, exports: function () { return [NodeComponent, CustomComponent, SocketComponent, ControlDirective, SocketDirective, KebabPipe]; } }); })();
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(ReteModule, [{
        type: NgModule,
        args: [{
                declarations: [
                    NodeComponent,
                    SocketComponent,
                    CustomComponent,
                    ControlDirective,
                    SocketDirective,
                    KebabPipe,
                ],
                imports: [
                    CommonModule
                ],
                providers: [
                    KebabPipe,
                    ControlDirective
                ],
                exports: [
                    NodeComponent,
                    CustomComponent,
                    SocketComponent,
                    ControlDirective,
                    SocketDirective,
                    KebabPipe
                ],
                entryComponents: [
                    NodeComponent,
                    SocketComponent,
                    CustomComponent
                ]
            }]
    }], function () { return [{ type: ɵngcc0.Injector }]; }, null); })();
    return ReteModule;
}());

function install(editor, params) {
    if (params === void 0) { params = {}; }
    editor.on('rendernode', function (_a) {
        var el = _a.el, node = _a.node, component = _a.component, bindControl = _a.bindControl, bindSocket = _a.bindSocket;
        var ngComponent = component;
        if (ngComponent.render && ngComponent.render !== 'angular')
            return;
        var element = document.createElement('rete-element');
        var props = element;
        props.component = ngComponent.component || params.component || NodeComponent;
        props.props = Object.assign({}, ngComponent.props || {}, {
            node: node,
            editor: editor,
            bindControl: bindControl,
            bindSocket: bindSocket
        });
        el.appendChild(element);
    });
    editor.on('rendercontrol', function (_a) {
        var el = _a.el, control = _a.control;
        var ngControl = control;
        if (ngControl.render && ngControl.render !== 'angular')
            return;
        var element = document.createElement('rete-element');
        var props = element;
        props.component = ngControl.component;
        props.props = ngControl.props;
        el.appendChild(element);
    });
    editor.on(['connectioncreated', 'connectionremoved'], function (connection) {
        connection.output.node.update();
        connection.input.node.update();
    });
    editor.on('nodeselected', function () {
        editor.nodes.forEach(function (n) { return n.update(); });
    });
}
var AngularRenderPlugin = {
    name: 'angular-render',
    install: install
};

/**
 * Generated bundle index. Do not edit.
 */

export { AngularRenderPlugin, NodeComponent, NodeService, ReteModule, SocketComponent, CustomComponent as ɵa, ControlDirective as ɵb, SocketDirective as ɵc, KebabPipe as ɵd };


//# sourceMappingURL=rete-angular-render-plugin.js.map
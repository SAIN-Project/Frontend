import { __decorate } from 'tslib';
import { Injectable, ChangeDetectorRef, Input, Component, ChangeDetectionStrategy, Pipe, ElementRef, Directive, ViewContainerRef, Injector, ComponentFactoryResolver, NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { createCustomElement } from '@angular/elements';
import { Input as Input$1 } from 'rete';

var NodeService = /** @class */ (function () {
    function NodeService() {
    }
    NodeService.prototype.setBindings = function (bindSocket, bindControl) {
        this.bindSocket = bindSocket;
        this.bindControl = bindControl;
    };
    NodeService = __decorate([
        Injectable()
    ], NodeService);
    return NodeService;
}());

var NodeComponent = /** @class */ (function () {
    function NodeComponent(service, cdr) {
        this.service = service;
        this.cdr = cdr;
    }
    NodeComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.service.setBindings(this.bindSocket, this.bindControl);
        this.node.update = function () { return _this.cdr.detectChanges(); };
    };
    Object.defineProperty(NodeComponent.prototype, "inputs", {
        get: function () {
            return Array.from(this.node.inputs.values());
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NodeComponent.prototype, "outputs", {
        get: function () {
            return Array.from(this.node.outputs.values());
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(NodeComponent.prototype, "controls", {
        get: function () {
            return Array.from(this.node.controls.values());
        },
        enumerable: true,
        configurable: true
    });
    NodeComponent.prototype.selected = function () {
        return this.editor.selected.contains(this.node) ? 'selected' : '';
    };
    NodeComponent.ctorParameters = function () { return [
        { type: NodeService },
        { type: ChangeDetectorRef }
    ]; };
    __decorate([
        Input()
    ], NodeComponent.prototype, "editor", void 0);
    __decorate([
        Input()
    ], NodeComponent.prototype, "node", void 0);
    __decorate([
        Input()
    ], NodeComponent.prototype, "bindSocket", void 0);
    __decorate([
        Input()
    ], NodeComponent.prototype, "bindControl", void 0);
    NodeComponent = __decorate([
        Component({
            template: "<div class=\"node\" [ngClass]=\"[selected(), node.name] | kebab\">\n    <div class=\"title\">{{node.name}}</div>\n    <div class=\"output\" *ngFor=\"let output of outputs\">\n        <div class=\"output-title\">{{output.name}}</div>\n        <rete-socket rete-socket [io]=\"output\" [socket]=\"output.socket\"></rete-socket>\n    </div>\n    <div class=\"control\" *ngFor=\"let control of controls\" [rete-control]=\"control\"></div>\n    <div class=\"input\" *ngFor=\"let input of inputs\">\n        <rete-socket rete-socket [io]=\"input\" [socket]=\"input.socket\"></rete-socket>\n        <div class=\"input-title\" *ngIf=\"!input.showControl()\">{{input.name}}</div>\n        <div class=\"input-control\" *ngIf=\"input.showControl()\" [rete-control]=\"input.control\"></div>\n    </div>\n</div>",
            providers: [NodeService],
            changeDetection: ChangeDetectionStrategy.OnPush,
            styles: [".node{background:rgba(110,136,255,.8);border:2px solid #4e58bf;border-radius:10px;cursor:pointer;min-width:180px;height:auto;padding-bottom:6px;box-sizing:content-box;position:relative;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.node:hover{background:rgba(130,153,255,.8)}.node.selected{background:#ffd92c;border-color:#e3c000}.node .title{color:#fff;font-family:sans-serif;font-size:18px;padding:8px}.node .output{text-align:right}.node .input{text-align:left}.node .input-title,.node .output-title{vertical-align:middle;color:#fff;display:inline-block;font-family:sans-serif;font-size:14px;margin:6px;line-height:24px}.node .input-title[hidden],.node .output-title[hidden]{display:none}.node .input-control{z-index:1;width:calc(100% - 36px);vertical-align:middle;display:inline-block}.node .control{padding:6px 18px}"]
        })
    ], NodeComponent);
    return NodeComponent;
}());

var KebabPipe = /** @class */ (function () {
    function KebabPipe() {
    }
    KebabPipe.prototype.replace = function (s) {
        return s.toLowerCase().replace(/ /g, '-');
    };
    KebabPipe.prototype.transform = function (value) {
        var _this = this;
        return Array.isArray(value) ? value.map(function (s) { return _this.replace(s); }) : this.replace(value);
    };
    KebabPipe = __decorate([
        Pipe({ name: 'kebab' })
    ], KebabPipe);
    return KebabPipe;
}());

var SocketComponent = /** @class */ (function () {
    function SocketComponent() {
    }
    Object.defineProperty(SocketComponent.prototype, "type", {
        get: function () {
            return this.io instanceof Input$1 ? 'input' : 'output';
        },
        enumerable: true,
        configurable: true
    });
    __decorate([
        Input()
    ], SocketComponent.prototype, "socket", void 0);
    __decorate([
        Input()
    ], SocketComponent.prototype, "io", void 0);
    SocketComponent = __decorate([
        Component({
            selector: 'rete-socket',
            template: "<div *ngIf=\"socket\" class=\"socket\" [ngClass]=\"[type, socket.name]\" [title]=\"socket.name\"></div>",
            changeDetection: ChangeDetectionStrategy.OnPush,
            styles: [":host{display:inline-block}.socket{display:inline-block;cursor:pointer;border:1px solid #fff;border-radius:12px;width:24px;height:24px;margin:6px;vertical-align:middle;background:#96b38a;z-index:2;box-sizing:border-box}.socket:hover{border-width:4px}.socket.multiple{border-color:#ff0}.socket.output{margin-right:-12px}.socket.input{margin-left:-12px}"]
        })
    ], SocketComponent);
    return SocketComponent;
}());

var ControlDirective = /** @class */ (function () {
    function ControlDirective(el, service) {
        this.el = el;
        this.service = service;
    }
    ControlDirective.prototype.ngOnInit = function () {
        this.service.bindControl(this.el.nativeElement, this.control);
    };
    ControlDirective.ctorParameters = function () { return [
        { type: ElementRef },
        { type: NodeService }
    ]; };
    __decorate([
        Input('rete-control')
    ], ControlDirective.prototype, "control", void 0);
    ControlDirective = __decorate([
        Directive({
            selector: '[rete-control]'
        })
    ], ControlDirective);
    return ControlDirective;
}());

var SocketDirective = /** @class */ (function () {
    function SocketDirective(el, service) {
        this.el = el;
        this.service = service;
    }
    Object.defineProperty(SocketDirective.prototype, "type", {
        get: function () {
            return this.io instanceof Input$1 ? 'input' : 'output';
        },
        enumerable: true,
        configurable: true
    });
    SocketDirective.prototype.ngOnInit = function () {
        this.service.bindSocket(this.el.nativeElement, this.type, this.io);
    };
    SocketDirective.ctorParameters = function () { return [
        { type: ElementRef },
        { type: NodeService }
    ]; };
    __decorate([
        Input()
    ], SocketDirective.prototype, "io", void 0);
    SocketDirective = __decorate([
        Directive({
            selector: '[rete-socket]'
        })
    ], SocketDirective);
    return SocketDirective;
}());

var CustomComponent = /** @class */ (function () {
    function CustomComponent(vcr, injector, factoryResolver) {
        this.vcr = vcr;
        this.injector = injector;
        this.factoryResolver = factoryResolver;
    }
    CustomComponent.prototype.ngOnInit = function () {
        var factory = this.factoryResolver.resolveComponentFactory(this.component);
        var componentRef = factory.create(this.injector);
        var props = this.props;
        var _loop_1 = function (key) {
            Object.defineProperty(componentRef.instance, key, {
                get: function () { return props[key]; },
                set: function (val) { props[key] = val; }
            });
        };
        for (var key in props) {
            _loop_1(key);
        }
        this.vcr.insert(componentRef.hostView);
    };
    CustomComponent.prototype.ngOnDestroy = function () {
        this.vcr.detach(0);
    };
    CustomComponent.ctorParameters = function () { return [
        { type: ViewContainerRef },
        { type: Injector },
        { type: ComponentFactoryResolver }
    ]; };
    __decorate([
        Input()
    ], CustomComponent.prototype, "component", void 0);
    __decorate([
        Input()
    ], CustomComponent.prototype, "props", void 0);
    CustomComponent = __decorate([
        Component({
            template: '',
            changeDetection: ChangeDetectionStrategy.OnPush
        })
    ], CustomComponent);
    return CustomComponent;
}());

var ReteModule = /** @class */ (function () {
    function ReteModule(injector) {
        var CustomElement = createCustomElement(CustomComponent, { injector: injector });
        if (!customElements.get('rete-element'))
            customElements.define('rete-element', CustomElement);
    }
    ReteModule.ctorParameters = function () { return [
        { type: Injector }
    ]; };
    ReteModule = __decorate([
        NgModule({
            declarations: [
                NodeComponent,
                SocketComponent,
                CustomComponent,
                ControlDirective,
                SocketDirective,
                KebabPipe,
            ],
            imports: [
                CommonModule
            ],
            providers: [
                KebabPipe,
                ControlDirective
            ],
            exports: [
                NodeComponent,
                CustomComponent,
                SocketComponent,
                ControlDirective,
                SocketDirective,
                KebabPipe
            ],
            entryComponents: [
                NodeComponent,
                SocketComponent,
                CustomComponent
            ]
        })
    ], ReteModule);
    return ReteModule;
}());

function install(editor, params) {
    if (params === void 0) { params = {}; }
    editor.on('rendernode', function (_a) {
        var el = _a.el, node = _a.node, component = _a.component, bindControl = _a.bindControl, bindSocket = _a.bindSocket;
        var ngComponent = component;
        if (ngComponent.render && ngComponent.render !== 'angular')
            return;
        var element = document.createElement('rete-element');
        var props = element;
        props.component = ngComponent.component || params.component || NodeComponent;
        props.props = Object.assign({}, ngComponent.props || {}, {
            node: node,
            editor: editor,
            bindControl: bindControl,
            bindSocket: bindSocket
        });
        el.appendChild(element);
    });
    editor.on('rendercontrol', function (_a) {
        var el = _a.el, control = _a.control;
        var ngControl = control;
        if (ngControl.render && ngControl.render !== 'angular')
            return;
        var element = document.createElement('rete-element');
        var props = element;
        props.component = ngControl.component;
        props.props = ngControl.props;
        el.appendChild(element);
    });
    editor.on(['connectioncreated', 'connectionremoved'], function (connection) {
        connection.output.node.update();
        connection.input.node.update();
    });
    editor.on('nodeselected', function () {
        editor.nodes.forEach(function (n) { return n.update(); });
    });
}
var AngularRenderPlugin = {
    name: 'angular-render',
    install: install
};

/**
 * Generated bundle index. Do not edit.
 */

export { AngularRenderPlugin, NodeComponent, NodeService, ReteModule, SocketComponent, CustomComponent as ɵa, ControlDirective as ɵb, SocketDirective as ɵc, KebabPipe as ɵd };
//# sourceMappingURL=rete-angular-render-plugin.js.map

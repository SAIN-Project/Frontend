import * as tslib_1 from "tslib";
import { Component, Input, OnInit, Injector, ComponentFactoryResolver, ViewContainerRef, Type, ChangeDetectionStrategy } from '@angular/core';
import * as ɵngcc0 from '@angular/core';
let CustomComponent = class CustomComponent {
    constructor(vcr, injector, factoryResolver) {
        this.vcr = vcr;
        this.injector = injector;
        this.factoryResolver = factoryResolver;
    }
    ngOnInit() {
        const factory = this.factoryResolver.resolveComponentFactory(this.component);
        const componentRef = factory.create(this.injector);
        const { props } = this;
        for (let key in props) {
            Object.defineProperty(componentRef.instance, key, {
                get() { return props[key]; },
                set(val) { props[key] = val; }
            });
        }
        this.vcr.insert(componentRef.hostView);
    }
    ngOnDestroy() {
        this.vcr.detach(0);
    }
};
CustomComponent.ɵfac = function CustomComponent_Factory(t) { return new (t || CustomComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ViewContainerRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.Injector), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ComponentFactoryResolver)); };
CustomComponent.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: CustomComponent, selectors: [["ng-component"]], inputs: { component: "component", props: "props" }, decls: 0, vars: 0, template: function CustomComponent_Template(rf, ctx) { }, encapsulation: 2, changeDetection: 0 });
CustomComponent.ctorParameters = () => [
    { type: ViewContainerRef },
    { type: Injector },
    { type: ComponentFactoryResolver }
];
tslib_1.__decorate([
    Input()
], CustomComponent.prototype, "component", void 0);
tslib_1.__decorate([
    Input()
], CustomComponent.prototype, "props", void 0);
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(CustomComponent, [{
        type: Component,
        args: [{
                template: '',
                changeDetection: ChangeDetectionStrategy.OnPush
            }]
    }], function () { return [{ type: ɵngcc0.ViewContainerRef }, { type: ɵngcc0.Injector }, { type: ɵngcc0.ComponentFactoryResolver }]; }, { component: [{
            type: Input
        }], props: [{
            type: Input
        }] }); })();
export { CustomComponent };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3VzdG9tLmNvbXBvbmVudC5qcyIsInNvdXJjZXMiOlsicmV0ZS1hbmd1bGFyLXJlbmRlci1wbHVnaW4vY3VzdG9tLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFFLFFBQVEsRUFBRSx3QkFBd0IsRUFBRSxnQkFBZ0IsRUFBRSxJQUFJLEVBQUUsdUJBQXVCLEVBQUUsTUFBTSxlQUFlLENBQUM7O0FBTzlJLElBQWEsZUFBZSxHQUE1QixNQUFhLGVBQWU7QUFBRyxJQUk3QixZQUNVLEdBQXFCLEVBQ3JCLFFBQWtCLEVBQ2xCLGVBQXlDO0FBQ2xELFFBSFMsUUFBRyxHQUFILEdBQUcsQ0FBa0I7QUFBQyxRQUN0QixhQUFRLEdBQVIsUUFBUSxDQUFVO0FBQUMsUUFDbkIsb0JBQWUsR0FBZixlQUFlLENBQTBCO0FBQ3JELElBQUssQ0FBQztBQUNOLElBQ0UsUUFBUTtBQUNWLFFBQUksTUFBTSxPQUFPLEdBQUcsSUFBSSxDQUFDLGVBQWUsQ0FBQyx1QkFBdUIsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7QUFDakYsUUFBSSxNQUFNLFlBQVksR0FBRyxPQUFPLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUN2RCxRQUFJLE1BQU0sRUFBRSxLQUFLLEVBQUUsR0FBRyxJQUFJLENBQUM7QUFDM0IsUUFDSSxLQUFJLElBQUksR0FBRyxJQUFJLEtBQUssRUFBRTtBQUMxQixZQUFNLE1BQU0sQ0FBQyxjQUFjLENBQUMsWUFBWSxDQUFDLFFBQVEsRUFBRSxHQUFHLEVBQUU7QUFDeEQsZ0JBQVEsR0FBRyxLQUFLLE9BQU8sS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUNwQyxnQkFBUSxHQUFHLENBQUMsR0FBRyxJQUFJLEtBQUssQ0FBQyxHQUFHLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDO0FBQ3RDLGFBQU8sQ0FBQyxDQUFBO0FBQ1IsU0FBSztBQUNMLFFBQ0ksSUFBSSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsWUFBWSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0FBQzNDLElBQUUsQ0FBQztBQUNILElBQ0UsV0FBVztBQUNiLFFBQUksSUFBSSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDdkIsSUFBRSxDQUFDO0FBQ0gsQ0FBQzs7aVJBQUE7QUFDRDtBQUF5QyxZQXhCeEIsZ0JBQWdCO0FBQy9CLFlBQW9CLFFBQVE7QUFDNUIsWUFBMkIsd0JBQXdCO0FBQ25EO0FBUFM7QUFBcUIsSUFBN0IsS0FBSyxFQUFFO0FBQUMsa0RBQTRCO0FBQzVCO0FBRU4sSUFGRixLQUFLLEVBQUU7QUFBQyw4Q0FBYztBQUZaLGVBQWUsNEJBSjNCLFNBQVMsQ0FBQyxVQUNQLFFBQVEsRUFBRTtDQUFFLFVBQ1o7Q0FBZSxFQUFFO1NBQXVCLENBQUMsTUFBTSxNQUNsRCxDQUFDLElBQ1c7WUFBZSxDQTRCM0I7Ozs7OztvQkFDRDs7QUFwQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFPQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFJQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQUZBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFFQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBRUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFDQSxBQUVBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFFQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQ0EsQUFBQSxBQXZCQSxBQUFBLEFBQ0EsQUFBQSxBQUNBLEFBQUEsQUFOQSxBQUFBLEFBQUEsQUFBQSxBQUFBLEFBQ0EsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUZBLEFBQUEsQUFKQSxBQUFBLEFBQUEsQUFDQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFBQSxBQUFBLEFBQUEsQUFBQSxBQUNBLEFBQUEsQUFDQSxBQUFBLEFBNEJBLEFBNUJBLEFBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIElucHV0LCBPbkluaXQsIEluamVjdG9yLCBDb21wb25lbnRGYWN0b3J5UmVzb2x2ZXIsIFZpZXdDb250YWluZXJSZWYsIFR5cGUsIENoYW5nZURldGVjdGlvblN0cmF0ZWd5IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBQcm9wcyB9IGZyb20gJy4vdHlwZXMnO1xuXG5AQ29tcG9uZW50KHtcbiAgICB0ZW1wbGF0ZTogJycsXG4gICAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2hcbn0pXG5leHBvcnQgY2xhc3MgQ3VzdG9tQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0IHtcbiAgQElucHV0KCkgY29tcG9uZW50ITogVHlwZTxDb21wb25lbnQ+O1xuICBASW5wdXQoKSBwcm9wcyE6IFByb3BzO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgdmNyOiBWaWV3Q29udGFpbmVyUmVmLFxuICAgIHByaXZhdGUgaW5qZWN0b3I6IEluamVjdG9yLFxuICAgIHByaXZhdGUgZmFjdG9yeVJlc29sdmVyOiBDb21wb25lbnRGYWN0b3J5UmVzb2x2ZXJcbiAgKSB7fVxuXG4gIG5nT25Jbml0KCkge1xuICAgIGNvbnN0IGZhY3RvcnkgPSB0aGlzLmZhY3RvcnlSZXNvbHZlci5yZXNvbHZlQ29tcG9uZW50RmFjdG9yeSh0aGlzLmNvbXBvbmVudCk7XG4gICAgY29uc3QgY29tcG9uZW50UmVmID0gZmFjdG9yeS5jcmVhdGUodGhpcy5pbmplY3Rvcik7XG4gICAgY29uc3QgeyBwcm9wcyB9ID0gdGhpcztcblxuICAgIGZvcihsZXQga2V5IGluIHByb3BzKSB7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoY29tcG9uZW50UmVmLmluc3RhbmNlLCBrZXksIHtcbiAgICAgICAgZ2V0KCkgeyByZXR1cm4gcHJvcHNba2V5XTsgfSxcbiAgICAgICAgc2V0KHZhbCkgeyBwcm9wc1trZXldID0gdmFsOyB9XG4gICAgICB9KVxuICAgIH1cblxuICAgIHRoaXMudmNyLmluc2VydChjb21wb25lbnRSZWYuaG9zdFZpZXcpO1xuICB9XG5cbiAgbmdPbkRlc3Ryb3koKSB7XG4gICAgdGhpcy52Y3IuZGV0YWNoKDApO1xuICB9XG59XG4iXX0=